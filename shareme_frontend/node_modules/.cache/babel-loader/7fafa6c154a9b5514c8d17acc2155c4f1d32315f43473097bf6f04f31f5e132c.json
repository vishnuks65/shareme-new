{"ast":null,"code":"import debugIt from 'debug';\nexport { processOptions, validateOptions } from './_chunks/defaultOptionsValidator-N21NGwyb.js';\nimport { isPlainObject } from 'is-plain-object';\nfunction agent(opts) {\n  return {};\n}\nconst leadingSlash = /^\\//;\nconst trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n  const baseUri = baseUrl.replace(trailingSlash, \"\");\n  return {\n    processOptions: options => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options;\n      }\n      const url = [baseUri, options.url.replace(leadingSlash, \"\")].join(\"/\");\n      return Object.assign({}, options, {\n        url\n      });\n    }\n  };\n}\nconst SENSITIVE_HEADERS = [\"cookie\", \"authorization\"];\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst redactKeys = (source, redacted) => {\n  const target = {};\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key];\n    }\n  }\n  return target;\n};\nfunction debug(opts = {}) {\n  const verbose = opts.verbose;\n  const namespace = opts.namespace || \"get-it\";\n  const defaultLogger = debugIt(namespace);\n  const log = opts.log || defaultLogger;\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace);\n  let requestId = 0;\n  return {\n    processOptions: options => {\n      options.debug = log;\n      options.requestId = options.requestId || ++requestId;\n      return options;\n    },\n    onRequest: event => {\n      if (shortCircuit || !event) {\n        return event;\n      }\n      const options = event.options;\n      log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url);\n      if (verbose && options.body && typeof options.body === \"string\") {\n        log(\"[%s] Request body: %s\", options.requestId, options.body);\n      }\n      if (verbose && options.headers) {\n        const headers = opts.redactSensitiveHeaders === false ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n        log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers, null, 2));\n      }\n      return event;\n    },\n    onResponse: (res, context) => {\n      if (shortCircuit || !res) {\n        return res;\n      }\n      const reqId = context.options.requestId;\n      log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage);\n      if (verbose && res.body) {\n        log(\"[%s] Response body: %s\", reqId, stringifyBody(res));\n      }\n      return res;\n    },\n    onError: (err, context) => {\n      const reqId = context.options.requestId;\n      if (!err) {\n        log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId);\n        return err;\n      }\n      log(\"[%s] ERROR: %s\", reqId, err.message);\n      return err;\n    }\n  };\n}\nfunction stringifyBody(res) {\n  const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n  const isJson = contentType.indexOf(\"application/json\") !== -1;\n  return isJson ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n  try {\n    const parsed = typeof body === \"string\" ? JSON.parse(body) : body;\n    return JSON.stringify(parsed, null, 2);\n  } catch (err) {\n    return body;\n  }\n}\nfunction headers(_headers, opts = {}) {\n  return {\n    processOptions: options => {\n      const existing = options.headers || {};\n      options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing);\n      return options;\n    }\n  };\n}\nclass HttpError extends Error {\n  constructor(res, ctx) {\n    super();\n    const truncatedUrl = res.url.length > 400 ? \"\".concat(res.url.slice(0, 399), \"\\u2026\") : res.url;\n    let msg = \"\".concat(res.method, \"-request to \").concat(truncatedUrl, \" resulted in \");\n    msg += \"HTTP \".concat(res.statusCode, \" \").concat(res.statusMessage);\n    this.message = msg.trim();\n    this.response = res;\n    this.request = ctx.options;\n  }\n}\nfunction httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400;\n      if (!isHttpError) {\n        return res;\n      }\n      throw new HttpError(res, ctx);\n    }\n  };\n}\nfunction injectResponse(opts = {}) {\n  if (typeof opts.inject !== \"function\") {\n    throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n  }\n  const inject = function inject2(prevValue, event) {\n    const response = opts.inject(event, prevValue);\n    if (!response) {\n      return prevValue;\n    }\n    const options = event.context.options;\n    return {\n      body: \"\",\n      url: options.url,\n      method: options.method,\n      headers: {},\n      statusCode: 200,\n      statusMessage: \"OK\",\n      ...response\n    };\n  };\n  return {\n    interceptRequest: inject\n  };\n}\nconst isBuffer = typeof Buffer === \"undefined\" ? () => false : obj => Buffer.isBuffer(obj);\nconst serializeTypes = [\"boolean\", \"string\", \"number\"];\nfunction jsonRequest() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      if (!body) {\n        return options;\n      }\n      const isStream = typeof body.pipe === \"function\";\n      const shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body));\n      if (!shouldSerialize) {\n        return options;\n      }\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          \"Content-Type\": \"application/json\"\n        })\n      });\n    }\n  };\n}\nfunction jsonResponse(opts) {\n  return {\n    onResponse: response => {\n      const contentType = response.headers[\"content-type\"] || \"\";\n      const shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n      return Object.assign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: options => Object.assign({}, options, {\n      headers: Object.assign({\n        Accept: \"application/json\"\n      }, options.headers)\n    })\n  };\n  function tryParse(body) {\n    try {\n      return JSON.parse(body);\n    } catch (err) {\n      err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n      throw err;\n    }\n  }\n}\nfunction isBrowserOptions(options) {\n  return typeof options === \"object\" && options !== null && !(\"protocol\" in options);\n}\nfunction mtls(config = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing');\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing');\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing');\n  }\n  return {\n    finalizeOptions: options => {\n      if (isBrowserOptions(options)) {\n        return options;\n      }\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca\n      };\n      return Object.assign({}, options, mtlsOpts);\n    }\n  };\n}\nlet actualGlobal = {};\nif (typeof globalThis !== \"undefined\") {\n  actualGlobal = globalThis;\n} else if (typeof window !== \"undefined\") {\n  actualGlobal = window;\n} else if (typeof global !== \"undefined\") {\n  actualGlobal = global;\n} else if (typeof self !== \"undefined\") {\n  actualGlobal = self;\n}\nvar global$1 = actualGlobal;\nfunction observable(opts = {}) {\n  const Observable =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n  opts.implementation || global$1.Observable;\n  if (!Observable) {\n    throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n  }\n  return {\n    onReturn: (channels, context) => new Observable(observer => {\n      channels.error.subscribe(err => observer.error(err));\n      channels.progress.subscribe(event => observer.next(Object.assign({\n        type: \"progress\"\n      }, event)));\n      channels.response.subscribe(response => {\n        observer.next(Object.assign({\n          type: \"response\"\n        }, response));\n        observer.complete();\n      });\n      channels.request.publish(context);\n      return () => channels.abort.publish();\n    })\n  };\n}\nfunction progress() {\n  return {\n    onRequest: evt => {\n      if (evt.adapter !== \"xhr\") {\n        return;\n      }\n      const xhr = evt.request;\n      const context = evt.context;\n      if (\"upload\" in xhr && \"onprogress\" in xhr.upload) {\n        xhr.upload.onprogress = handleProgress(\"upload\");\n      }\n      if (\"onprogress\" in xhr) {\n        xhr.onprogress = handleProgress(\"download\");\n      }\n      function handleProgress(stage) {\n        return event => {\n          const percent = event.lengthComputable ? event.loaded / event.total * 100 : -1;\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable\n          });\n        };\n      }\n    }\n  };\n}\nconst promise = (options = {}) => {\n  const PromiseImplementation = options.implementation || Promise;\n  if (!PromiseImplementation) {\n    throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n  }\n  return {\n    onReturn: (channels, context) => new PromiseImplementation((resolve, reject) => {\n      const cancel = context.options.cancelToken;\n      if (cancel) {\n        cancel.promise.then(reason => {\n          channels.abort.publish(reason);\n          reject(reason);\n        });\n      }\n      channels.error.subscribe(reject);\n      channels.response.subscribe(response => {\n        resolve(options.onlyBody ? response.body : response);\n      });\n      setTimeout(() => {\n        try {\n          channels.request.publish(context);\n        } catch (err) {\n          reject(err);\n        }\n      }, 0);\n    })\n  };\n};\nclass Cancel {\n  constructor(message) {\n    this.__CANCEL__ = true;\n    this.message = message;\n  }\n  toString() {\n    return \"Cancel\".concat(this.message ? \": \".concat(this.message) : \"\");\n  }\n}\nconst _CancelToken = class _CancelToken {\n  constructor(executor) {\n    if (typeof executor !== \"function\") {\n      throw new TypeError(\"executor must be a function.\");\n    }\n    let resolvePromise = null;\n    this.promise = new Promise(resolve => {\n      resolvePromise = resolve;\n    });\n    executor(message => {\n      if (this.reason) {\n        return;\n      }\n      this.reason = new Cancel(message);\n      resolvePromise(this.reason);\n    });\n  }\n};\n_CancelToken.source = () => {\n  let cancel;\n  const token = new _CancelToken(can => {\n    cancel = can;\n  });\n  return {\n    token,\n    cancel\n  };\n};\nlet CancelToken = _CancelToken;\nconst isCancel = value => !!(value && (value == null ? void 0 : value.__CANCEL__));\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n  }\n  return {\n    processOptions: options => Object.assign({\n      proxy: _proxy\n    }, options)\n  };\n}\nvar defaultShouldRetry = (err, attempt, options) => {\n  if (options.method !== \"GET\" && options.method !== \"HEAD\") {\n    return false;\n  }\n  return err.isNetworkError || false;\n};\nconst isStream = stream => stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\nvar sharedRetry = opts => {\n  const maxRetries = opts.maxRetries || 5;\n  const retryDelay = opts.retryDelay || getRetryDelay;\n  const allowRetry = opts.shouldRetry;\n  return {\n    onError: (err, context) => {\n      const options = context.options;\n      const max = options.maxRetries || maxRetries;\n      const shouldRetry = options.shouldRetry || allowRetry;\n      const attemptNumber = options.attemptNumber || 0;\n      if (isStream(options.body)) {\n        return err;\n      }\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err;\n      }\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {\n          attemptNumber: attemptNumber + 1\n        })\n      });\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber));\n      return null;\n    }\n  };\n};\nfunction getRetryDelay(attemptNum) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = (opts = {}) => sharedRetry({\n  shouldRetry: defaultShouldRetry,\n  ...opts\n});\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n  const query = new URLSearchParams();\n  const nest = (name, _value) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value;\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(\"\".concat(name, \"[\").concat(index, \"]\"), value[index]);\n        }\n      } else {\n        query.append(\"\".concat(name, \"[]\"), \"\");\n      }\n    } else if (typeof value === \"object\" && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(\"\".concat(name, \"[\").concat(key, \"]\"), obj);\n      }\n    } else {\n      query.append(name, value);\n    }\n  };\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value);\n  }\n  return query.toString();\n}\nfunction urlEncoded() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      if (!body) {\n        return options;\n      }\n      const isStream = typeof body.pipe === \"function\";\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body);\n      if (!shouldSerialize) {\n        return options;\n      }\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      };\n    }\n  };\n}\nfunction buildKeepAlive(agent) {\n  return function keepAlive(config = {}) {\n    const ms = config.ms || 1e3;\n    const maxFree = config.maxFree || 256;\n    const agentOptions = {\n      keepAlive: true,\n      keepAliveMsecs: ms,\n      maxFreeSockets: maxFree\n    };\n    return agent(agentOptions);\n  };\n}\nconst keepAlive = buildKeepAlive(agent);\nexport { Cancel, CancelToken, agent, base, debug, headers, httpErrors, injectResponse, jsonRequest, jsonResponse, keepAlive, mtls, observable, progress, promise, proxy, retry, urlEncoded };","map":{"version":3,"names":["agent","opts","leadingSlash","trailingSlash","base","baseUrl","baseUri","replace","processOptions","options","test","url","join","Object","assign","SENSITIVE_HEADERS","hasOwn","prototype","hasOwnProperty","redactKeys","source","redacted","target","key","call","indexOf","toLowerCase","debug","verbose","namespace","defaultLogger","debugIt","log","shortCircuit","enabled","requestId","onRequest","event","method","body","headers","redactSensitiveHeaders","JSON","stringify","onResponse","res","context","reqId","statusCode","statusMessage","stringifyBody","onError","err","message","contentType","isJson","tryFormat","parsed","parse","_headers","existing","override","HttpError","Error","constructor","ctx","truncatedUrl","length","concat","slice","msg","trim","response","request","httpErrors","isHttpError","injectResponse","inject","inject2","prevValue","interceptRequest","isBuffer","Buffer","obj","serializeTypes","jsonRequest","isStream","pipe","shouldSerialize","Array","isArray","isPlainObject","jsonResponse","shouldDecode","force","tryParse","Accept","isBrowserOptions","mtls","config","ca","cert","finalizeOptions","mtlsOpts","actualGlobal","globalThis","window","global","self","global$1","observable","Observable","implementation","onReturn","channels","observer","error","subscribe","progress","next","type","complete","publish","abort","evt","adapter","xhr","upload","onprogress","handleProgress","stage","percent","lengthComputable","loaded","total","promise","PromiseImplementation","Promise","resolve","reject","cancel","cancelToken","then","reason","onlyBody","setTimeout","Cancel","__CANCEL__","toString","_CancelToken","executor","TypeError","resolvePromise","token","can","CancelToken","isCancel","value","proxy","_proxy","host","defaultShouldRetry","attempt","isNetworkError","stream","sharedRetry","maxRetries","retryDelay","getRetryDelay","allowRetry","shouldRetry","max","attemptNumber","newContext","attemptNum","Math","pow","random","retry","encode","data","query","URLSearchParams","nest","name","_value","Set","from","index","append","entries","urlEncoded","buildKeepAlive","keepAlive","ms","maxFree","agentOptions","keepAliveMsecs","maxFreeSockets"],"sources":["D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\agent\\browser-agent.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\base.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\debug.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\headers.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\httpErrors.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\injectResponse.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\util\\isBuffer.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\jsonRequest.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\jsonResponse.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\util\\isBrowserOptions.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\mtls.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\util\\global.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\observable.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\progress\\browser-progress.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\promise.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\proxy.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\util\\browser-shouldRetry.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\retry\\shared-retry.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\retry\\browser-retry.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\urlEncoded.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware\\keepAlive.ts","D:\\A Projects\\shareme-new\\shareme_frontend\\node_modules\\get-it\\src\\middleware.browser.ts"],"sourcesContent":["/**\n * This middleware only has an effect in Node.js.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function agent(opts?: any): any {\n  return {}\n}\n","import type {Middleware} from '../types'\n\nconst leadingSlash = /^\\//\nconst trailingSlash = /\\/$/\n\n/** @public */\nexport function base(baseUrl: string) {\n  const baseUri = baseUrl.replace(trailingSlash, '')\n  return {\n    processOptions: (options) => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options // Already prefixed\n      }\n\n      const url = [baseUri, options.url.replace(leadingSlash, '')].join('/')\n      return Object.assign({}, options, {url})\n    },\n  } satisfies Middleware\n}\n","import debugIt from 'debug'\n\nimport type {Middleware} from '../types'\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source: any, redacted: any) => {\n  const target: any = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\n/** @public */\nexport function debug(opts: any = {}) {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: (options) => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: (event) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res, context) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err, context) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    },\n  } satisfies Middleware\n}\n\nfunction stringifyBody(res: any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body: any) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function headers(_headers: any, opts: any = {}) {\n  return {\n    processOptions: (options) => {\n      const existing = options.headers || {}\n      options.headers = opts.override\n        ? Object.assign({}, existing, _headers)\n        : Object.assign({}, _headers, existing)\n\n      return options\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\nclass HttpError extends Error {\n  response: any\n  request: any\n  constructor(res: any, ctx: any) {\n    super()\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}…` : res.url\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n    this.message = msg.trim()\n    this.response = res\n    this.request = ctx.options\n  }\n}\n\n/** @public */\nexport function httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400\n      if (!isHttpError) {\n        return res\n      }\n\n      throw new HttpError(res, ctx)\n    },\n  } satisfies Middleware\n}\n","import type {Middleware, MiddlewareHooks, MiddlewareResponse} from '../types'\n\n/** @public */\nexport function injectResponse(\n  opts: {\n    inject: (\n      event: Parameters<MiddlewareHooks['interceptRequest']>[1],\n      prevValue: Parameters<MiddlewareHooks['interceptRequest']>[0],\n    ) => Partial<MiddlewareResponse | undefined | void>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = {} as any,\n) {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  const inject = function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return {\n      body: '',\n      url: options.url,\n      method: options.method!,\n      headers: {},\n      statusCode: 200,\n      statusMessage: 'OK',\n      ...response,\n    } satisfies MiddlewareResponse\n  } satisfies Middleware['interceptRequest']\n\n  return {interceptRequest: inject} satisfies Middleware\n}\n","export const isBuffer =\n  typeof Buffer === 'undefined' ? () => false : (obj: unknown) => Buffer.isBuffer(obj)\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nconst serializeTypes = ['boolean', 'string', 'number']\n\n/** @public */\nexport function jsonRequest() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize =\n        !isStream &&\n        !isBuffer(body) &&\n        (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          'Content-Type': 'application/json',\n        }),\n      })\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function jsonResponse(opts?: any) {\n  return {\n    onResponse: (response) => {\n      const contentType = response.headers['content-type'] || ''\n      const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n      if (!response.body || !contentType || !shouldDecode) {\n        return response\n      }\n\n      return Object.assign({}, response, {body: tryParse(response.body)})\n    },\n\n    processOptions: (options) =>\n      Object.assign({}, options, {\n        headers: Object.assign({Accept: 'application/json'}, options.headers),\n      }),\n  } satisfies Middleware\n\n  function tryParse(body: any) {\n    try {\n      return JSON.parse(body)\n    } catch (err: any) {\n      err.message = `Failed to parsed response body as JSON: ${err.message}`\n      throw err\n    }\n  }\n}\n","import type {RequestOptions} from '../types'\n\nexport function isBrowserOptions(options: unknown): options is RequestOptions {\n  return typeof options === 'object' && options !== null && !('protocol' in options)\n}\n","import type {Middleware} from '../types'\nimport {isBrowserOptions} from '../util/isBrowserOptions'\n\n/** @public */\nexport function mtls(config: any = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing')\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing')\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing')\n  }\n\n  return {\n    finalizeOptions: (options) => {\n      if (isBrowserOptions(options)) {\n        return options\n      }\n\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca,\n      }\n      return Object.assign({}, options, mtlsOpts)\n    },\n  } satisfies Middleware\n}\n","let actualGlobal = {} as typeof globalThis\n\nif (typeof globalThis !== 'undefined') {\n  actualGlobal = globalThis\n} else if (typeof window !== 'undefined') {\n  actualGlobal = window\n} else if (typeof global !== 'undefined') {\n  actualGlobal = global\n} else if (typeof self !== 'undefined') {\n  actualGlobal = self\n}\n\nexport default actualGlobal\n","import type {Middleware} from '../types'\nimport global from '../util/global'\n\n/** @public */\nexport function observable(\n  opts: {\n    implementation?: any\n  } = {},\n) {\n  const Observable =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || (global as any).Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed',\n    )\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Observable((observer: any) => {\n        channels.error.subscribe((err) => observer.error(err))\n        channels.progress.subscribe((event) =>\n          observer.next(Object.assign({type: 'progress'}, event)),\n        )\n        channels.response.subscribe((response) => {\n          observer.next(Object.assign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      }),\n  } satisfies Middleware\n}\n","import type {Middleware} from '../../types'\n\nexport function progress() {\n  return {\n    onRequest: (evt) => {\n      if (evt.adapter !== 'xhr') {\n        return\n      }\n\n      const xhr = evt.request\n      const context = evt.context\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload')\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download')\n      }\n\n      function handleProgress(stage: 'download' | 'upload') {\n        return (event: any) => {\n          const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable,\n          })\n        }\n      }\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport const promise = (\n  options: {onlyBody?: boolean; implementation?: PromiseConstructor} = {},\n) => {\n  const PromiseImplementation = options.implementation || Promise\n  if (!PromiseImplementation) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new PromiseImplementation((resolve, reject) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then((reason: any) => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe((response) => {\n          resolve(options.onlyBody ? (response as any).body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => {\n          try {\n            channels.request.publish(context)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      }),\n  } satisfies Middleware\n}\n\n/**\n * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.\n *\n * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!\n */\n/** @public */\nexport class Cancel {\n  __CANCEL__ = true\n\n  message: string | undefined\n\n  constructor(message: string | undefined) {\n    this.message = message\n  }\n\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : ''}`\n  }\n}\n\n/** @public */\nexport class CancelToken {\n  promise: Promise<any>\n  reason?: Cancel\n\n  constructor(executor: (cb: (message?: string) => void) => void) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.')\n    }\n\n    let resolvePromise: any = null\n\n    this.promise = new Promise((resolve) => {\n      resolvePromise = resolve\n    })\n\n    executor((message?: string) => {\n      if (this.reason) {\n        // Cancellation has already been requested\n        return\n      }\n\n      this.reason = new Cancel(message)\n      resolvePromise(this.reason)\n    })\n  }\n\n  static source = () => {\n    let cancel: (message?: string) => void\n    const token = new CancelToken((can) => {\n      cancel = can\n    })\n\n    return {\n      token: token,\n      cancel: cancel!,\n    }\n  }\n}\n\nconst isCancel = (value: any): value is Cancel => !!(value && value?.__CANCEL__)\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function proxy(_proxy: any) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error('Proxy middleware takes an object of host, port and auth properties')\n  }\n\n  return {\n    processOptions: (options) => Object.assign({proxy: _proxy}, options),\n  } satisfies Middleware\n}\n","export default (err: any, attempt: any, options: any) => {\n  if (options.method !== 'GET' && options.method !== 'HEAD') {\n    return false\n  }\n\n  return err.isNetworkError || false\n}\n","import type {Middleware, RetryOptions} from '../../types'\n\nconst isStream = (stream: any) =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport default (opts: RetryOptions) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {attemptNumber: attemptNumber + 1}),\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    },\n  } satisfies Middleware\n}\n\nfunction getRetryDelay(attemptNum: number) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n","import type {RetryOptions} from '../../types'\nimport defaultShouldRetry from '../../util/browser-shouldRetry'\nimport sharedRetry from './shared-retry'\n\n/** @public */\nexport const retry = (opts: Partial<RetryOptions> = {}) =>\n  sharedRetry({shouldRetry: defaultShouldRetry, ...opts})\n\nretry.shouldRetry = defaultShouldRetry\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nfunction encode(data: Record<string, string | Set<number | string>>): string {\n  const query = new URLSearchParams()\n\n  const nest = (name: string, _value: unknown) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(`${name}[${index}]`, value[index])\n        }\n      } else {\n        query.append(`${name}[]`, '')\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(`${name}[${key}]`, obj)\n      }\n    } else {\n      query.append(name, value as string)\n    }\n  }\n\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value)\n  }\n\n  return query.toString()\n}\n\n/** @public */\nexport function urlEncoded() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body)\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    },\n  } satisfies Middleware\n}\n","export function buildKeepAlive(agent: any) {\n  return function keepAlive(config: any = {}): any {\n    const ms = config.ms || 1000\n    const maxFree = config.maxFree || 256\n    const agentOptions = {\n      keepAlive: true,\n      keepAliveMsecs: ms,\n      maxFreeSockets: maxFree,\n    }\n\n    return agent(agentOptions)\n  }\n}\n","export * from './middleware/agent/browser-agent'\nexport * from './middleware/base'\nexport * from './middleware/debug'\nexport * from './middleware/defaultOptionsProcessor'\nexport * from './middleware/defaultOptionsValidator'\nexport * from './middleware/headers'\nexport * from './middleware/httpErrors'\nexport * from './middleware/injectResponse'\nexport * from './middleware/jsonRequest'\nexport * from './middleware/jsonResponse'\nexport * from './middleware/mtls'\nexport * from './middleware/observable'\nexport * from './middleware/progress/browser-progress'\nexport * from './middleware/promise'\nexport * from './middleware/proxy'\nexport * from './middleware/retry/browser-retry'\nexport * from './middleware/urlEncoded'\nexport type * from './types'\n\nimport {agent} from './middleware/agent/browser-agent'\nimport {buildKeepAlive} from './middleware/keepAlive'\n/** @public */\nexport const keepAlive = buildKeepAlive(agent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}