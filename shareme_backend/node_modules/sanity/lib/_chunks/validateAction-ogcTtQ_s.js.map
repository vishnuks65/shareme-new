{"version":3,"file":"validateAction-ogcTtQ_s.js","sources":["../../src/_internal/cli/util/workerChannels.ts","../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import type {MessagePort, Worker} from 'worker_threads'\n\ntype StreamReporter<TPayload = unknown> = {emit: (payload: TPayload) => void; end: () => void}\ntype EventReporter<TPayload = unknown> = (payload: TPayload) => void\ntype EventReceiver<TPayload = unknown> = () => Promise<TPayload>\ntype StreamReceiver<TPayload = unknown> = () => AsyncIterable<TPayload>\n\ntype EventKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelEvent<any> ? K : never\n}[keyof TWorkerChannel]\ntype StreamKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelStream<any> ? K : never\n}[keyof TWorkerChannel]\n\ntype EventMessage<TPayload = unknown> = {type: 'event'; name: string; payload: TPayload}\ntype StreamEmissionMessage<TPayload = unknown> = {type: 'emission'; name: string; payload: TPayload}\ntype StreamEndMessage = {type: 'end'; name: string}\ntype WorkerChannelMessage = EventMessage | StreamEmissionMessage | StreamEndMessage\n\n/**\n * Represents the definition of a \"worker channel\" to report progress from the\n * worker to the parent. Worker channels can define named events or streams and\n * the worker will report events and streams while the parent will await them.\n * This allows the control flow of the parent to follow the control flow of the\n * worker 1-to-1.\n */\nexport type WorkerChannel<\n  TWorkerChannel extends Record<\n    string,\n    WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>\n  > = Record<string, WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>>,\n> = TWorkerChannel\n\nexport type WorkerChannelEvent<TPayload = void> = {type: 'event'; payload: TPayload}\nexport type WorkerChannelStream<TPayload = void> = {type: 'stream'; payload: TPayload}\n\nexport interface WorkerChannelReporter<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReporter<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReporter<TPayload>\n      : void\n  }\n}\n\nexport interface WorkerChannelReceiver<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReceiver<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReceiver<TPayload>\n      : void\n  }\n  // TODO: good candidate for [Symbol.asyncDispose] when our tooling better supports it\n  dispose: () => Promise<number>\n}\n\n/**\n * A simple queue that has two primary methods: `push(message)` and\n * `await next()`. This message queue is used by the \"receiver\" of the worker\n * channel and this class handles buffering incoming messages if the worker is\n * producing faster than the parent as well as returning a promise if there is\n * no message yet in the queue when the parent awaits `next()`.\n */\nclass MessageQueue<T> {\n  resolver: ((result: IteratorResult<T>) => void) | null = null\n  queue: T[] = []\n\n  push(message: T) {\n    if (this.resolver) {\n      this.resolver({value: message, done: false})\n      this.resolver = null\n    } else {\n      this.queue.push(message)\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    if (this.queue.length) {\n      return Promise.resolve({value: this.queue.shift()!, done: false})\n    }\n\n    return new Promise((resolve) => (this.resolver = resolve))\n  }\n\n  end() {\n    if (this.resolver) {\n      this.resolver({value: undefined, done: true})\n    }\n  }\n}\n\nfunction isWorkerChannelMessage(message: unknown): message is WorkerChannelMessage {\n  if (typeof message !== 'object') return false\n  if (!message) return false\n  if (!('type' in message)) return false\n  if (typeof message.type !== 'string') return false\n  const types: string[] = ['event', 'emission', 'end'] satisfies WorkerChannelMessage['type'][]\n  return types.includes(message.type)\n}\n\n/**\n * Creates a \"worker channel receiver\" that subscribes to incoming messages\n * from the given worker and returns promises for worker channel events and\n * async iterators for worker channel streams.\n */\nexport function createReceiver<TWorkerChannel extends WorkerChannel>(\n  worker: Worker,\n): WorkerChannelReceiver<TWorkerChannel> {\n  const _events = new Map<string, MessageQueue<EventMessage>>()\n  const _streams = new Map<string, MessageQueue<StreamEmissionMessage>>()\n  const errors = new MessageQueue<{type: 'error'; error: unknown}>()\n\n  const eventQueue = (name: string) => {\n    const queue = _events.get(name) ?? new MessageQueue()\n    if (!_events.has(name)) _events.set(name, queue)\n    return queue\n  }\n\n  const streamQueue = (name: string) => {\n    const queue = _streams.get(name) ?? new MessageQueue()\n    if (!_streams.has(name)) _streams.set(name, queue)\n    return queue\n  }\n\n  const handleMessage = (message: unknown) => {\n    if (!isWorkerChannelMessage(message)) return\n    if (message.type === 'event') eventQueue(message.name).push(message)\n    if (message.type === 'emission') streamQueue(message.name).push(message)\n    if (message.type === 'end') streamQueue(message.name).end()\n  }\n\n  const handleError = (error: unknown) => {\n    errors.push({type: 'error', error})\n  }\n\n  worker.addListener('message', handleMessage)\n  worker.addListener('error', handleError)\n\n  return {\n    event: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReceiver: EventReceiver = async () => {\n          const {value} = await Promise.race([eventQueue(name).next(), errors.next()])\n          if (value.type === 'error') throw value.error\n          return value.payload\n        }\n\n        return eventReceiver\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['stream'], {\n      get: (target, prop) => {\n        if (typeof prop !== 'string') return target[prop as keyof typeof target]\n        const name = prop // alias for better typescript narrowing\n\n        async function* streamReceiver() {\n          while (true) {\n            const {value, done} = await Promise.race([streamQueue(name).next(), errors.next()])\n            if (done) return\n            if (value.type === 'error') throw value.error\n            yield value.payload\n          }\n        }\n\n        return streamReceiver satisfies StreamReceiver\n      },\n    }),\n    dispose: () => {\n      worker.removeListener('message', handleMessage)\n      worker.removeListener('error', handleError)\n      return worker.terminate()\n    },\n  }\n}\n\n/**\n * Creates a \"worker channel reporter\" that sends messages to the given\n * `parentPort` to be received by a worker channel receiver.\n */\nexport function createReporter<TWorkerChannel extends WorkerChannel>(\n  parentPort: MessagePort | null,\n): WorkerChannelReporter<TWorkerChannel> {\n  if (!parentPort) {\n    throw new Error('parentPart was falsy')\n  }\n\n  return {\n    event: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReporter: EventReporter = (payload) => {\n          const message: EventMessage = {type: 'event', name, payload}\n          parentPort.postMessage(message)\n        }\n\n        return eventReporter\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['stream'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const streamReporter: StreamReporter = {\n          emit: (payload) => {\n            const message: StreamEmissionMessage = {type: 'emission', name, payload}\n            parentPort.postMessage(message)\n          },\n          end: () => {\n            const message: StreamEndMessage = {type: 'end', name}\n            parentPort.postMessage(message)\n          },\n        }\n\n        return streamReporter\n      },\n    }),\n  }\n}\n","import path from 'path'\nimport {Worker} from 'worker_threads'\nimport readPkgUp from 'read-pkg-up'\nimport {ClientConfig} from '@sanity/client'\nimport {ValidationMarker} from '@sanity/types'\nimport type {\n  ValidateDocumentsWorkerData,\n  ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, WorkerChannelReceiver} from '../../util/workerChannels'\n\nconst DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY = 5\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  ndjsonFilePath?: string\n  maxCustomValidationConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      ndjsonFilePath,\n      maxCustomValidationConcurrency:\n        maxCustomValidationConcurrency ?? DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import {isatty} from 'tty'\nimport logSymbols from 'log-symbols'\nimport type {ValidationMarker} from '@sanity/types'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  intentUrl?: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.substring(0, subject.length - 1) : subject\n  }`\n\nconst percentageFormatter = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = (value: number): string => percentageFormatter.format(Math.min(value, 1))\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import chalk from 'chalk'\nimport {Path, ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\n\nimport {convertToTree, formatTree, maxKeyLength, Tree} from '../../../../util/tree'\nimport {DocumentValidationResult, isTty, Level, levelValues} from './util'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost?: string\n  basePath?: string\n}\n\ninterface Marker extends Pick<ValidationMarker, 'level' | 'message'> {\n  path: Path\n}\n\ntype ValidationTree = Tree<Marker>\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(chalk.black(' INFO '))) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.nodes) return ''\n\n  const [first, ...rest] = root.nodes.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  documentId,\n  documentType,\n  level,\n  markers,\n  intentUrl,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree<Marker>(markers)\n\n  const documentTypeHeader = isTty\n    ? chalk.bgWhite(chalk.black(` ${documentType} `))\n    : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    intentUrl ? link(documentId, intentUrl) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n  const childErrors = formatTree<Marker>({\n    node: tree.children,\n    paddingLength,\n    getNodes: ({nodes}) => (nodes ?? []).slice().sort(compareLevels),\n    getMessage: (marker) => [logSymbols[marker.level], marker.message].join(' '),\n  })\n\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import type {BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  DocumentValidationResult,\n  Level,\n  count,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\n// eslint-disable-next-line max-statements\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  if (!flags.file) {\n    // Report document count\n    spinner.start('Calculating documents to be validated…')\n    const {documentCount} = await worker.event.loadedDocumentCount()\n\n    // Report export progress\n    const downloadStart = Date.now()\n    spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n    for await (const {downloadedCount} of worker.stream.exportProgress()) {\n      const percentage = percent(downloadedCount / documentCount)\n      spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n    }\n    spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n  }\n\n  const {totalDocumentsToValidate} = await worker.event.exportFinished()\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(totalDocumentsToValidate, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(totalDocumentsToValidate, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / totalDocumentsToValidate,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(\n    `Validated ${count(totalDocumentsToValidate, 'documents')} ${seconds(validationStart)}`,\n  )\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(`${formatDocumentValidation(result)}\\n`)\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (result.markers.length) {\n      output.print(JSON.stringify(result))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {BuiltInValidationReporter} from '../validateAction'\n\n// TODO: replace with Array.fromAsync when it's out of stage3\nasync function arrayFromAsync<T>(iterable: AsyncIterable<T>) {\n  const results: T[] = []\n  for await (const item of iterable) results.push(item)\n  return results\n}\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  const results = await arrayFromAsync(worker.stream.validation())\n  const formatted = results\n    // report out only documents with some markers\n    .filter(({markers}) => markers.length)\n    // remove validatedCount from the results\n    .map(({validatedCount, ...result}) => result)\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(formatted))\n\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for (const {level} of formatted) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n  }\n\n  return overallLevel\n}\n","import {pretty} from './prettyReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {json} from './jsonReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import path from 'path'\nimport fs from 'fs'\nimport type {CliCommandArguments, CliCommandContext, CliOutputter} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport chalk from 'chalk'\nimport {ClientConfig} from '@sanity/client'\nimport type {WorkerChannelReceiver} from '../../util/workerChannels'\nimport type {ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {validateDocuments} from './validateDocuments'\nimport {reporters} from './reporters'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  dataset?: string\n  file?: string\n  level?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  yes?: boolean\n  y?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(`${logSymbols.warning} Warning:`)} This command ${\n        flags.file\n          ? 'reads all documents from your input file'\n          : 'downloads all documents from your dataset'\n      } and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Processes all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    if (flags.file) {\n      output.print(\n        `- Checks for missing document references against the live dataset if not found in your file.`,\n      )\n    }\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const clientConfig: Partial<ClientConfig> = {\n    ...apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    // we set this explictly to true because the default client configuration\n    // from the CLI comes configured with `useProjectHostname: false` when\n    // `requireProject` is set to false\n    useProjectHostname: true,\n    // we set this explictly to true because we pass in a token via the\n    // `clientConfiguration` object and also mock a browser environment in\n    // this worker which triggers the browser warning\n    ignoreBrowserTokenWarning: true,\n  }\n\n  let ndjsonFilePath\n  if (flags.file) {\n    if (typeof flags.file !== 'string') {\n      throw new Error(`'--file' must be a string`)\n    }\n    const filePath = path.resolve(workDir, flags.file)\n\n    const stat = await fs.promises.stat(filePath)\n    if (!stat.isFile()) {\n      throw new Error(`'--file' must point to a valid ndjson file or tarball`)\n    }\n\n    ndjsonFilePath = filePath\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig,\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["MessageQueue","constructor","resolver","queue","push","message","value","done","next","length","Promise","resolve","shift","end","isWorkerChannelMessage","type","types","includes","createReceiver","worker","_events","Map","_streams","errors","eventQueue","name","_a","get","has","set","streamQueue","handleMessage","handleError","error","addListener","event","Proxy","target","eventReceiver","race","payload","stream","prop","streamReceiver","dispose","removeListener","terminate","DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY","defaultReporter","_ref","createValidationGenerator","documentId","documentType","markers","revision","level","validation","result","validateDocuments","options","workspace","clientConfig","configPath","dataset","projectId","workDir","process","cwd","reporter","maxCustomValidationConcurrency","ndjsonFilePath","rootPkgPath","sync","__dirname","path","Error","workerPath","join","dirname","Worker","workerData","JSON","parse","stringify","env","isTty","isatty","levelValues","warning","info","count","amount","subject","concat","toLocaleString","substring","percentageFormatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","percent","format","Math","min","secondFormatter","seconds","startTime","endTime","Date","now","summary","_ref2","infos","valid","warnings","arguments","undefined","levelValue","logSymbols","success","documents","filter","Boolean","levelHeaders","chalk","bold","bgRed","black","red","bgYellow","yellow","cyan","link","text","url","underline","compareLevels","a","b","formatRootErrors","root","hasChildren","paddingLength","nodes","first","rest","slice","sort","firstElbow","firstPadding","repeat","firstLine","subsequentPadding","subsequentElbow","restOfLines","map","marker","formatDocumentValidation","_ref3","intentUrl","tree","convertToTree","documentTypeHeader","bgWhite","header","max","maxKeyLength","children","childErrors","formatTree","node","getNodes","_ref4","getMessage","rootErrors","pretty","_ref5","output","flags","workspaceLoadStart","spinner","start","loadedWorkspace","succeed","file","documentCount","loadedDocumentCount","downloadStart","downloadedCount","exportProgress","percentage","totalDocumentsToValidate","exportFinished","referenceIntegrityStart","loadedReferenceIntegrity","validationStart","results","totals","validatedCount","print","localeCompare","overallLevel","ndjson","_ref6","arrayFromAsync","iterable","item","json","_ref7","formatted","_ref8","_ref9","reporters","validateAction","args","_ref10","apiClient","prompt","extOptions","unattendedMode","yes","y","confirmed","single","default","exitCode","formatter","ListFormat","Object","keys","key","Number","isInteger","requireUser","requireProject","config","useProjectHostname","ignoreBrowserTokenWarning","filePath","stat","fs","promises","isFile"],"mappings":";;;;;;;;AAuEA,MAAMA,YAAgB,CAAA;EAAtBC,WAAAA,CAAA,EAAA;IAC2D,IAAA,CAAAC,QAAA,GAAA,IAAA;IACzD,IAAA,CAAAC,KAAA,GAAa,EAAC;EAAA;EAEdC,KAAKC,OAAY,EAAA;IACf,IAAI,KAAKH,QAAU,EAAA;MACjB,IAAA,CAAKA,SAAS;QAACI,KAAA,EAAOD,OAAS;QAAAE,IAAA,EAAM;OAAM,CAAA;MAC3C,IAAA,CAAKL,QAAW,GAAA,IAAA;IAAA,CACX,MAAA;MACA,IAAA,CAAAC,KAAA,CAAMC,KAAKC,OAAO,CAAA;IACzB;EACF;EAEAG,IAAmCA,CAAA,EAAA;IAC7B,IAAA,IAAA,CAAKL,MAAMM,MAAQ,EAAA;MACd,OAAAC,OAAA,CAAQC,OAAQ,CAAA;QAACL,KAAO,EAAA,IAAA,CAAKH,MAAMS,KAAM,EAAA;QAAIL,IAAM,EAAA;MAAA,CAAM,CAAA;IAClE;IAEA,OAAO,IAAIG,OAAQ,CAACC,OAAa,IAAA,IAAA,CAAKT,WAAWS,OAAQ,CAAA;EAC3D;EAEAE,GAAMA,CAAA,EAAA;IACJ,IAAI,KAAKX,QAAU,EAAA;MACjB,IAAA,CAAKA,SAAS;QAACI,KAAA,EAAO,KAAW,CAAA;QAAAC,IAAA,EAAM;OAAK,CAAA;IAC9C;EACF;AACF;AAEA,SAASO,uBAAuBT,OAAmD,EAAA;EACjF,IAAI,OAAOA,OAAY,KAAA,QAAA,EAAiB,OAAA,KAAA;EACxC,IAAI,CAACA,OAAA,EAAgB,OAAA,KAAA;EACrB,IAAI,EAAE,MAAU,IAAAA,OAAA,CAAA,EAAiB,OAAA,KAAA;EAC7B,IAAA,OAAOA,QAAQU,IAAS,KAAA,QAAA,EAAiB,OAAA,KAAA;EAC7C,MAAMC,KAAkB,GAAA,CAAC,OAAS,EAAA,UAAA,EAAY,KAAK,CAAA;EAC5C,OAAAA,KAAA,CAAMC,QAAS,CAAAZ,OAAA,CAAQU,IAAI,CAAA;AACpC;AAOO,SAASG,eACdC,MACuC,EAAA;EACjC,MAAAC,OAAA,GAAA,mBAAcC,GAAwC,EAAA;EACtD,MAAAC,QAAA,GAAA,mBAAeD,GAAiD,EAAA;EAChE,MAAAE,MAAA,GAAS,IAAIvB,YAA8C,EAAA;EAE3D,MAAAwB,UAAA,GAAcC,IAAiB,IAAA;IAxHvC,IAAAC,EAAA;IAyHI,MAAMvB,SAAQuB,EAAQ,GAAAN,OAAA,CAAAO,GAAA,CAAIF,IAAI,CAAhB,KAAA,IAAA,GAAAC,EAAA,GAAqB,IAAI1B,YAAa,EAAA;IAChD,IAAA,CAACoB,OAAQ,CAAAQ,GAAA,CAAIH,IAAI,CAAA,EAAWL,OAAA,CAAAS,GAAA,CAAIJ,MAAMtB,KAAK,CAAA;IACxC,OAAAA,KAAA;EAAA,CACT;EAEM,MAAA2B,WAAA,GAAeL,IAAiB,IAAA;IA9HxC,IAAAC,EAAA;IA+HI,MAAMvB,SAAQuB,EAAS,GAAAJ,QAAA,CAAAK,GAAA,CAAIF,IAAI,CAAjB,KAAA,IAAA,GAAAC,EAAA,GAAsB,IAAI1B,YAAa,EAAA;IACjD,IAAA,CAACsB,QAAS,CAAAM,GAAA,CAAIH,IAAI,CAAA,EAAYH,QAAA,CAAAO,GAAA,CAAIJ,MAAMtB,KAAK,CAAA;IAC1C,OAAAA,KAAA;EAAA,CACT;EAEM,MAAA4B,aAAA,GAAiB1B,OAAqB,IAAA;IACtC,IAAA,CAACS,uBAAuBT,OAAO,CAAA,EAAG;IACtC,IAAIA,QAAQU,IAAS,KAAA,OAAA,EAASS,UAAA,CAAWnB,OAAQ,CAAAoB,IAAI,CAAE,CAAArB,IAAA,CAAKC,OAAO,CAAA;IACnE,IAAIA,QAAQU,IAAS,KAAA,UAAA,EAAYe,WAAA,CAAYzB,OAAQ,CAAAoB,IAAI,CAAE,CAAArB,IAAA,CAAKC,OAAO,CAAA;IACvE,IAAIA,QAAQU,IAAS,KAAA,KAAA,EAAmBe,WAAA,CAAAzB,OAAA,CAAQoB,IAAI,CAAA,CAAEZ,GAAI,CAAA,CAAA;EAAA,CAC5D;EAEM,MAAAmB,WAAA,GAAeC,KAAmB,IAAA;IACtCV,MAAA,CAAOnB,IAAK,CAAA;MAACW,IAAM,EAAA,OAAA;MAASkB;IAAM,CAAA,CAAA;EAAA,CACpC;EAEOd,MAAA,CAAAe,WAAA,CAAY,WAAWH,aAAa,CAAA;EACpCZ,MAAA,CAAAe,WAAA,CAAY,SAASF,WAAW,CAAA;EAEhC,OAAA;IACLG,KAAO,EAAA,IAAIC,KAAM,CAAA,EAAsD,EAAA;MACrET,GAAA,EAAKA,CAACU,MAAA,EAAQZ,IAAS,KAAA;QACrB,IAAI,OAAOA,IAAS,KAAA,QAAA,EAAU,OAAOY,OAAOZ,IAA2B,CAAA;QAEvE,MAAMa,gBAA+B,MAAAA,CAAA,KAAY;UAC/C,MAAM;YAAChC;UAAS,CAAA,GAAA,MAAMI,QAAQ6B,IAAK,CAAA,CAACf,UAAW,CAAAC,IAAI,EAAEjB,IAAK,CAAA,CAAA,EAAGe,MAAO,CAAAf,IAAA,CAAA,CAAM,CAAC,CAAA;UAC3E,IAAIF,MAAMS,IAAS,KAAA,OAAA,EAAS,MAAMT,KAAM,CAAA2B,KAAA;UACxC,OAAO3B,KAAM,CAAAkC,OAAA;QAAA,CACf;QAEO,OAAAF,aAAA;MACT;IAAA,CACD,CAAA;IACDG,MAAQ,EAAA,IAAIL,KAAM,CAAA,EAAuD,EAAA;MACvET,GAAA,EAAKA,CAACU,MAAA,EAAQK,IAAS,KAAA;QACrB,IAAI,OAAOA,IAAS,KAAA,QAAA,EAAU,OAAOL,OAAOK,IAA2B,CAAA;QACvE,MAAMjB,IAAO,GAAAiB,IAAA;QAEb,gBAAgBC,cAAiBA,CAAA,EAAA;UAC/B,OAAO,IAAM,EAAA;YACX,MAAM;cAACrC,KAAO;cAAAC;YAAQ,CAAA,GAAA,MAAMG,QAAQ6B,IAAK,CAAA,CAACT,WAAY,CAAAL,IAAI,EAAEjB,IAAK,CAAA,CAAA,EAAGe,MAAO,CAAAf,IAAA,CAAA,CAAM,CAAC,CAAA;YAC9E,IAAAD,IAAA,EAAM;YACV,IAAID,MAAMS,IAAS,KAAA,OAAA,EAAS,MAAMT,KAAM,CAAA2B,KAAA;YACxC,MAAM3B,KAAM,CAAAkC,OAAA;UACd;QACF;QAEO,OAAAG,cAAA;MACT;IAAA,CACD,CAAA;IACDC,SAASA,CAAA,KAAM;MACNzB,MAAA,CAAA0B,cAAA,CAAe,WAAWd,aAAa,CAAA;MACvCZ,MAAA,CAAA0B,cAAA,CAAe,SAASb,WAAW,CAAA;MAC1C,OAAOb,OAAO2B,SAAU,EAAA;IAC1B;EAAA,CACF;AACF;AC5KA,MAAMC,yCAA4C,GAAA,CAAA;AAuBlD,MAAMC,eAAkB,GAAAC,IAAA,IAAuE;EAAA,IAAtE;IAACR,MAAA;IAAQG;GAA6D,GAAAK,IAAA;EAC7F,gBAAgBC,yBAA4BA,CAAA,EAAA;IACzB,WAAA,MAAA;MAACC;MAAYC,YAAc;MAAAC,OAAA;MAASC;MAAUC;IAAK,CAAA,IAAKd,MAAO,CAAAe,UAAA,EAAc,EAAA;MAC5F,MAAMC,MAAmC,GAAA;QACvCN,UAAA;QACAC,YAAA;QACAE,QAAA;QACAC,KAAA;QACAF;MAAA,CACF;MAEM,MAAAI,MAAA;IACR;IAEA,MAAMb,OAAQ,CAAA,CAAA;EAChB;EAEA,OAAOM,yBAA0B,CAAA,CAAA;AACnC,CAAA;AASO,SAASQ,kBAAkBC,OAA4C,EAAA;EA7D9E,IAAAjC,EAAA;EA8DQ,MAAA;IACJkC,SAAA;IACAC,YAAA;IACAC,UAAA;IACAC,OAAA;IACAC,SAAA;IACAC,OAAA,GAAUC,QAAQC,GAAI,CAAA,CAAA;IACtBC,QAAW,GAAApB,eAAA;IACXO,KAAA;IACAc,8BAAA;IACAC;EACE,CAAA,GAAAX,OAAA;EAEE,MAAAY,WAAA,GAAA,CAAc7C,eAAU8C,IAAK,CAAA;IAACL,KAAKM;EAAS,CAAC,MAA/B,IAAkC,GAAA,KAAA,CAAA,GAAA/C,EAAA,CAAAgD,IAAA;EACtD,IAAI,CAACH,WAAa,EAAA;IACV,MAAA,IAAII,MAAM,oDAAoD,CAAA;EACtE;EAEA,MAAMC,aAAaF,IAAK,CAAAG,IAAA,CACtBH,IAAA,CAAKI,QAAQP,WAAW,CAAA,EACxB,KAAA,EACA,WAAA,EACA,KAAA,EACA,SAAA,EACA,sBAAA,CACF;EAEM,MAAApD,MAAA,GAAS,IAAI4D,MAAA,CAAOH,UAAY,EAAA;IACpCI,UAAY,EAAA;MACVf,OAAA;MAAA;MAEAJ,cAAcoB,IAAK,CAAAC,KAAA,CAAMD,IAAK,CAAAE,SAAA,CAAUtB,YAAY,CAAC,CAAA;MACrDC,UAAA;MACAF,SAAA;MACAG,OAAA;MACAC,SAAA;MACAT,KAAA;MACAe,cAAA;MACAD,gCACEA,8BAAkC,IAAA,IAAA,GAAAA,8BAAA,GAAAtB;IACtC,CAAA;IAAA;IAEAqC,KAAKlB,OAAQ,CAAAkB;EAAA,CACd,CAAA;EAEM,OAAAhB,QAAA,CAASlD,cAAwC,CAAAC,MAAM,CAAC,CAAA;AACjE;AC7Fa,MAAAkE,KAAA,GAAQC,OAAO,CAAC,CAAA;AACtB,MAAMC,cAAc;EAACtD,KAAA,EAAO;EAAGuD,OAAS,EAAA,CAAA;EAAGC,MAAM;CAAC;AAMlD,MAAMC,QAAQA,CAACC,MAAA,EAAgBC,YACpC,EAAG,CAAAC,MAAA,CAAAF,MAAA,CAAOG,eAAe,OAAO,CAAA,EAAC,GAC/B,CAAA,CAAAD,MAAA,CAAAF,MAAA,KAAW,IAAIC,OAAQ,CAAAG,SAAA,CAAU,GAAGH,OAAQ,CAAAnF,MAAA,GAAS,CAAC,CAAI,GAAAmF,OAAA,CAAA;AAG9D,MAAMI,mBAAsB,GAAA,IAAIC,IAAK,CAAAC,YAAA,CAAa,OAAS,EAAA;EACzDC,KAAO,EAAA,SAAA;EACPC,qBAAuB,EAAA,CAAA;EACvBC,qBAAuB,EAAA;AACzB,CAAC,CAAA;AAKY,MAAAC,OAAA,GAAWhG,KAA0B,IAAA0F,mBAAA,CAAoBO,OAAOC,IAAK,CAAAC,GAAA,CAAInG,KAAO,EAAA,CAAC,CAAC,CAAA;AAE/F,MAAMoG,eAAkB,GAAA,IAAIT,IAAK,CAAAC,YAAA,CAAa,OAAS,EAAA;EACrDE,qBAAuB,EAAA,CAAA;EACvBC,qBAAuB,EAAA;AACzB,CAAC,CAAA;AAMY,MAAAM,OAAA,GAAWC,SAA8B,IAAA;EAC9C,MAAAC,OAAA,GAAUC,KAAKC,GAAI,EAAA;EACzB,OAAO,IAAIlB,MAAgB,CAAAa,eAAA,CAAAH,MAAA,CAAA,CAAQM,OAAU,GAAAD,SAAA,IAAa,GAAI,CAAC,EAAA,IAAA,CAAA;AACjE,CAAA;AAaa,MAAAI,OAAA,GAAU,SAAAA,CAAAC,KAAA,EAGV;EAAA,IAFX;IAAC1F,MAAA;IAAQ2F;IAAOC,KAAO;IAAAC;EACvB,CAAA,GAAAH,KAAA;EAAA,IAAA1D,KAAA,GAAA8D,SAAA,CAAA5G,MAAA,QAAA4G,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAe,SACJ;EACL,MAAAE,UAAA,GAAahC,YAAYhC,KAAK,CAAA;EAE7B,OAAA,CACL,GAAGsC,MAAW,CAAA2B,UAAA,CAAAC,OAAA,EAAO,eAAc5B,MAAM,CAAAH,KAAA,CAAAyB,KAAA,CAAMO,WAAW,WAAW,CAAA,CAAA,EACrE,EAAA,CAAG7B,kBAAW5D,KAAK,EAAA,aAAA,CAAA,CAAc4D,aAAMtE,MAAO,CAAAmG,SAAA,EAAW,WAAW,CAAA,EAAC,IAAK,CAAA,CAAA7B,MAAA,CAAAH,KAAA,CACxEnE,MAAO,CAAA8B,OAAA,EACP,QAAA,CACF,CAAA,EACAkE,UAAc,IAAAhC,WAAA,CAAYC,OACxB,IAAA,EAAA,CAAGK,MAAW,CAAA2B,UAAA,CAAAhC,OAAA,EAAO,aAAc,CAAA,CAAAK,MAAA,CAAAH,KAAA,CAAM0B,QAAS,CAAAM,SAAA,EAAW,WAAW,CAAA,EAAC,IAAK,CAAA,CAAA7B,MAAA,CAAAH,KAAA,CAC5E0B,QAAS,CAAA/D,OAAA,EACT,UAAA,CACF,CAAA,EACFkE,UAAc,IAAAhC,WAAA,CAAYE,IACxB,IAAA,EAAA,CAAGI,MAAW,CAAA2B,UAAA,CAAA/B,IAAA,EAAI,aAAc,CAAA,CAAAI,MAAA,CAAAH,KAAA,CAAMwB,KAAM,CAAAQ,SAAA,EAAW,WAAW,CAAA,EAAC,IAAK,CAAA,CAAA7B,MAAA,CAAAH,KAAA,CACtEwB,KAAM,CAAAQ,SAAA,EACN,SAAA,CACF,CAAA,CAED,CAAAC,MAAA,CAAOC,OAAO,CAAA,CACd/C,KAAK,IAAI,CAAA;AACd,CAAA;ACtEA,MAAMgD,YAAe,GAAA;EACnB5F,KAAO,EAAAoD,KAAA,GAAQyC,KAAM,CAAAC,IAAA,CAAKD,MAAME,KAAM,CAAAF,KAAA,CAAMG,KAAM,CAAA,SAAS,CAAC,CAAC,CAAI,GAAAH,KAAA,CAAMI,IAAI,SAAS,CAAA;EACpF1C,OAAS,EAAAH,KAAA,GAAQyC,KAAM,CAAAC,IAAA,CAAKD,MAAMK,QAAS,CAAAL,KAAA,CAAMG,KAAM,CAAA,QAAQ,CAAC,CAAC,CAAI,GAAAH,KAAA,CAAMM,OAAO,QAAQ,CAAA;EAC1F3C,IAAM,EAAAJ,KAAA,GAAQyC,KAAM,CAAAC,IAAA,CAAKD,MAAMO,IAAK,CAAAP,KAAA,CAAMG,KAAM,CAAA,QAAQ,CAAC,CAAC,CAAI,GAAAH,KAAA,CAAMO,KAAK,QAAQ;AACnF,CAAA;AAKA,MAAMC,IAAO,GAAAA,CAACC,IAAc,EAAAC,GAAA,KAC1BnD,KAAQ,GAAA,UAAA,CAAaQ,MAAG,CAAA2C,GAAA,EAAA,MAAA,CAAA,CAAS3C,MAAI,CAAA0C,IAAA,EAAA,cAAA,CAAA,GAAqBT,KAAM,CAAAW,SAAA,CAAUF,IAAI,CAAA;AAKhF,MAAMG,aAAA,GAAgBA,CAA4CC,CAAA,EAAMC,CACtE,KAAArD,WAAA,CAAYoD,EAAEpF,KAAK,CAAA,GAAIgC,WAAY,CAAAqD,CAAA,CAAErF,KAAK,CAAA;AAK5C,MAAMsF,gBAAmB,GAAAA,CAACC,IAAsB,EAAAC,WAAA,EAAsBC,aAA0B,KAAA;EAC9F,IAAI,CAACF,IAAK,CAAAG,KAAA,EAAc,OAAA,EAAA;EAElB,MAAA,CAACC,KAAO,EAAA,GAAGC,IAAI,CAAA,GAAIL,KAAKG,KAAM,CAAAG,KAAA,CAAQ,CAAA,CAAAC,IAAA,CAAKX,aAAa,CAAA;EAC9D,IAAI,CAACQ,KAAA,EAAc,OAAA,EAAA;EAEb,MAAAI,UAAA,GAAaP,cAAc,SAAO,GAAA,cAAA;EACxC,MAAMQ,YAAe,GAAA,GAAA,CAAIC,MAAO,CAAAR,aAAA,GAAgB,CAAC,CAAA;EAC3C,MAAAS,SAAA,GAAY,EAAG,CAAA5D,MAAA,CAAAyD,UAAA,EAAU,UAAW,CAAA,CAAAzD,MAAA,CAAA0D,YAAA,EAAY,GAAI,CAAA,CAAA1D,MAAA,CAAA2B,UAAA,CAAW0B,KAAM,CAAA3F,KAAK,CAAC,EAAA,GAAA,CAAA,CAC/EsC,MAAM,CAAAqD,KAAA,CAAA7I,OAAA,CAAA;EAER,MAAMqJ,iBAAoB,GAAA,GAAA,CAAIF,MAAO,CAAAR,aAAA,GAAgB,CAAC,CAAA;EAChD,MAAAW,eAAA,GAAkBZ,cAAc,SAAO,GAAA,IAAA;EAE7C,MAAMa,cAAcT,IACjB,CAAAU,GAAA,CACEC,MACC,IAAA,EAAA,CAAGjE,MAAkB,CAAA8D,eAAA,CAAA,CAAA9D,MAAA,CAAA6D,iBAAA,EAAiB,GAAI,CAAA,CAAA7D,MAAA,CAAA2B,UAAA,CAAWsC,MAAO,CAAAvG,KAAK,CAAC,EAAA,GAAA,CAAA,CAAIsC,MAAO,CAAAiE,MAAA,CAAAzJ,OAAA,CAAA,CACjF,CACCwE,KAAK,IAAI,CAAA;EACL,OAAA,CAAC4E,WAAWG,WAAW,CAAA,CAAEjC,OAAOC,OAAO,CAAA,CAAE/C,KAAK,IAAI,CAAA;AAC3D,CAAA;AAKO,SAASkF,wBAAyBA,CAAAC,KAAA,EAMG;EAAA,IANH;IACvC7G,UAAA;IACAC,YAAA;IACAG,KAAA;IACAF,OAAA;IACA4G;EACF,CAA4C,GAAAD,KAAA;EACpC,MAAAE,IAAA,GAAOC,cAAsB9G,OAAO,CAAA;EAE1C,MAAM+G,kBAAqB,GAAA/E,KAAA,GACvByC,KAAM,CAAAuC,OAAA,CAAQvC,KAAM,CAAAG,KAAA,CAAM,GAAI,CAAApC,MAAA,CAAAzC,YAAA,EAAY,GAAG,CAAA,CAAC,CAC9C,GAAA,GAAA,CAAIyC,MAAY,CAAAzC,YAAA,EAAA,GAAA,CAAA;EAEpB,MAAMkH,MAAS,GAAA,EAAA,CAAGzE,MAAa,CAAAgC,YAAA,CAAAtE,KAAK,GAAC,GAAI,CAAA,CAAAsC,MAAA,CAAAuE,kBAAA,EAAkB,GACzD,CAAA,CAAAvE,MAAA,CAAAoE,SAAA,GAAY3B,KAAKnF,UAAY,EAAA8G,SAAS,CAAI,GAAAnC,KAAA,CAAMW,UAAUtF,UAAU,CAAA,CAAA;EAGhE,MAAA6F,aAAA,GAAgBxC,KAAK+D,GAAI,CAAAC,YAAA,CAAaN,KAAKO,QAAQ,CAAA,GAAI,GAAG,EAAE,CAAA;EAElE,MAAMC,cAAcC,UAAmB,CAAA;IACrCC,MAAMV,IAAK,CAAAO,QAAA;IACXzB,aAAA;IACA6B,QAAA,EAAUC,KAAA;MAAA,IAAC;QAAC7B;MAAK,CAAA,GAAA6B,KAAA;MAAA,OAAA,CAAO7B,KAAS,IAAA,IAAA,GAAAA,KAAA,GAAA,EAAI,EAAAG,KAAA,EAAQ,CAAAC,IAAA,CAAKX,aAAa,CAAA;IAAA;IAC/DqC,UAAY,EAACjB,MAAW,IAAA,CAACtC,UAAW,CAAAsC,MAAA,CAAOvG,KAAK,CAAA,EAAGuG,MAAO,CAAAzJ,OAAO,CAAE,CAAAwE,IAAA,CAAK,GAAG;EAAA,CAC5E,CAAA;EAED,MAAMmG,aAAanC,gBAAiB,CAAAqB,IAAA,EAAMQ,WAAY,CAAAjK,MAAA,GAAS,GAAGuI,aAAa,CAAA;EAExE,OAAA,CAACsB,QAAQU,UAAY,EAAAN,WAAW,EAAE/C,MAAO,CAAAC,OAAO,CAAE,CAAA/C,IAAA,CAAK,IAAI,CAAA;AACpE;AC9EO,MAAMoG,SAAoC,MAAAC,KAAA,IAAmC;EAAA,IAA5B;IAACC,MAAQ;IAAAhK,MAAA;IAAQiK;GAAW,GAAAF,KAAA;EAC5E,MAAAG,kBAAA,GAAqBvE,KAAKC,GAAI,EAAA;EAE9B,MAAAuE,OAAA,GAAUH,MACb,CAAAG,OAAA,CAAQF,KAAM,CAAAxH,SAAA,GAAY,qBAAsB,CAAAiC,MAAA,CAAAuF,KAAA,CAAMxH,SAAS,EAAA,SAAA,CAAA,GAAO,yBAAoB,CAAA,CAC1F2H,KAAM,CAAA,CAAA;EAET,MAAM3H,SAAY,GAAA,MAAMzC,MAAO,CAAAgB,KAAA,CAAMqJ,eAAgB,CAAA,CAAA;EAC7CF,OAAA,CAAAG,OAAA,CACN,oBAAqB,CAAA5F,MAAA,CAAAjC,SAAA,CAAUnC,IAAI,EAAA,mBAAA,CAAA,CAAoBoE,MAAU,CAAAjC,SAAA,CAAAI,SAAA,EAAS,iBACxE,CAAA,CAAA6B,MAAA,CAAAuF,KAAA,CAAMrH,OAAW,IAAAH,SAAA,CAAUG,OAC7B,EAAA,IAAA,CAAA,CAAK8B,eAAQwF,kBAAkB,CAAA,CAAA,CACjC;EAEI,IAAA,CAACD,MAAMM,IAAM,EAAA;IAEfJ,OAAA,CAAQC,MAAM,6CAAwC,CAAA;IACtD,MAAM;MAACI;IAAa,CAAA,GAAI,MAAMxK,MAAA,CAAOgB,MAAMyJ,mBAAoB,CAAA,CAAA;IAGzD,MAAAC,aAAA,GAAgB/E,KAAKC,GAAI,EAAA;IAC/BuE,OAAA,CAAQ/C,IAAO,GAAA,cAAA,CAAe1C,MAAM,CAAAH,KAAA,CAAAiG,aAAA,EAAe,WAAW,CAAC,EAAA,QAAA,CAAA;IAC/D,WAAA,MAAiB;MAACG;IAAe,CAAA,IAAK3K,MAAO,CAAAsB,MAAA,CAAOsJ,gBAAkB,EAAA;MAC9D,MAAAC,UAAA,GAAa1F,OAAQ,CAAAwF,eAAA,GAAkBH,aAAa,CAAA;MAC1DL,OAAA,CAAQ/C,OAAO,cAAe,CAAA1C,MAAA,CAAAH,KAAA,CAAMiG,aAAe,EAAA,WAAW,GAAC,SAAK,CAAA,CAAA9F,MAAA,CAAAmG,UAAA,CAAA;IACtE;IACQV,OAAA,CAAAG,OAAA,CAAQ,cAAc5F,MAAM,CAAAH,KAAA,CAAAiG,aAAA,EAAe,WAAW,CAAC,EAAA,GAAA,CAAA,CAAI9F,MAAQ,CAAAc,OAAA,CAAAkF,aAAa,CAAG,CAAA,CAAA;EAC7F;EAEA,MAAM;IAACI;EAAwB,CAAA,GAAI,MAAM9K,MAAA,CAAOgB,MAAM+J,cAAe,CAAA,CAAA;EAE/D,MAAAC,uBAAA,GAA0BrF,KAAKC,GAAI,EAAA;EACzCuE,OAAA,CAAQC,MAAM,oCAA+B,CAAA;EACvC,MAAApK,MAAA,CAAOgB,MAAMiK,wBAAyB,EAAA;EAC5Cd,OAAA,CAAQG,OAAQ,CAAA,yBAAA,CAA0B5F,MAAQ,CAAAc,OAAA,CAAAwF,uBAAuB,CAAG,CAAA,CAAA;EAGtE,MAAAE,eAAA,GAAkBvF,KAAKC,GAAI,EAAA;EACjCuE,OAAA,CAAQC,MAAM,aAAc,CAAA1F,MAAA,CAAAH,KAAA,CAAMuG,wBAA0B,EAAA,WAAW,GAAC,QAAG,CAAA,CAAA;EAE3E,MAAMK,UAAsC,EAAC;EAE7C,MAAMC,MAAS,GAAA;IACbpF,KAAA,EAAO;MAACO,SAAA,EAAW;IAAC,CAAA;IACpBnG,MAAQ,EAAA;MAACmG,SAAW,EAAA,CAAA;MAAGrE,SAAS;IAAC,CAAA;IACjC+D,QAAU,EAAA;MAACM,SAAW,EAAA,CAAA;MAAGrE,SAAS;IAAC,CAAA;IACnC6D,KAAO,EAAA;MAACQ,SAAW,EAAA,CAAA;MAAGrE,SAAS;IAAC;EAAA,CAClC;EAEiB,WAAA,MAAA;IAACmJ;IAAgB,GAAG/I;OAAWtC,MAAO,CAAAsB,MAAA,CAAOe,YAAc,EAAA;IACpE,MAAA;MAACH;IAAW,CAAA,GAAAI,MAAA;IAElB,IAAIJ,QAAQ5C,MAAQ,EAAA;MAClB6L,OAAA,CAAQlM,KAAKqD,MAAM,CAAA;IACrB;IAEA,MAAMlC,SAAS8B,OAAQ,CAAAsE,MAAA,CAAQmC,MAAW,IAAAA,MAAA,CAAOvG,UAAU,OAAO,CAAA;IAClE,MAAM6D,WAAW/D,OAAQ,CAAAsE,MAAA,CAAQmC,MAAW,IAAAA,MAAA,CAAOvG,UAAU,SAAS,CAAA;IACtE,MAAM2D,QAAQ7D,OAAQ,CAAAsE,MAAA,CAAQmC,MAAW,IAAAA,MAAA,CAAOvG,UAAU,MAAM,CAAA;IAE5D,IAAA,CAACF,QAAQ5C,MAAQ,EAAA;MACnB8L,MAAA,CAAOpF,MAAMO,SAAa,IAAA,CAAA;IAC5B;IAEA,IAAInG,OAAOd,MAAQ,EAAA;MACjB8L,MAAA,CAAOhL,OAAOmG,SAAa,IAAA,CAAA;MACpB6E,MAAA,CAAAhL,MAAA,CAAO8B,WAAW9B,MAAO,CAAAd,MAAA;IAClC;IAEA,IAAI2G,SAAS3G,MAAQ,EAAA;MACnB8L,MAAA,CAAOnF,SAASM,SAAa,IAAA,CAAA;MACtB6E,MAAA,CAAAnF,QAAA,CAAS/D,WAAW+D,QAAS,CAAA3G,MAAA;IACtC;IAEA,IAAIyG,MAAMzG,MAAQ,EAAA;MAChB8L,MAAA,CAAOrF,MAAMQ,SAAa,IAAA,CAAA;MACnB6E,MAAA,CAAArF,KAAA,CAAM7D,WAAW6D,KAAM,CAAAzG,MAAA;IAChC;IAEA6K,OAAA,CAAQ/C,IACN,GAAA,aAAA,CAAc1C,MAAM,CAAAH,KAAA,CAAAuG,wBAAA,EAA0B,WAAW,CAAA,EAAC,YAC1D,CAAA,GAAA,YAAA,CAAapG,MAAM,CAAAH,KAAA,CAAA8G,cAAA,EAAgB,WAAW,CAAA,EAAC,IAAK,CAAA,CAAA3G,MAAA,CAAAS,OAAA,CAClDkG,cAAiB,GAAAP,wBAAA,CAClB,EAAA,MAAA,CAAA,CAAOpG,MAAQ,CAAAmB,OAAA,CAAAuF,MAAA,EAAQnB,MAAM7H,KAAK,CAAA,CAAA;EACvC;EAEQ+H,OAAA,CAAAG,OAAA,CACN,aAAa5F,MAAM,CAAAH,KAAA,CAAAuG,wBAAA,EAA0B,WAAW,CAAC,EAAA,GAAA,CAAA,CAAIpG,eAAQwG,eAAe,CAAA,CAAA,CACtF;EACAlB,MAAA,CAAOsB,MAAM,yBAA0B,CAAA5G,MAAA,CAAAmB,OAAA,CAAQuF,MAAQ,EAAAnB,KAAA,CAAM7H,KAAK,CAAG,CAAA,CAAA;EAE7D+I,OAAA,CAAAjD,IAAA,CAAK,CAACV,CAAA,EAAGC,CAAM,KAAA;IACjB,IAAAD,CAAA,CAAEpF,UAAUqF,CAAE,CAAArF,KAAA,EAAO,OAAOoF,CAAE,CAAAvF,YAAA,CAAasJ,aAAc,CAAA9D,CAAA,CAAExF,YAAY,CAAA;IAC3E,OAAOmC,YAAYoD,CAAE,CAAApF,KAAK,CAAI,GAAAgC,WAAA,CAAYqD,EAAErF,KAAK,CAAA;EAAA,CAClD,CAAA;EAED,IAAIoJ,YAAsB,GAAA,MAAA;EAE1B,KAAA,MAAWlJ,UAAU6I,OAAS,EAAA;IAC5B,IAAI7I,OAAOF,KAAU,KAAA,OAAA,EAAwBoJ,YAAA,GAAA,OAAA;IACzC,IAAAlJ,MAAA,CAAOF,KAAU,KAAA,SAAA,IAAaoJ,YAAiB,KAAA,OAAA,EAAwBA,YAAA,GAAA,SAAA;IAE3ExB,MAAA,CAAOsB,KAAM,CAAA,EAAA,CAAG5G,MAAyB,CAAAkE,wBAAA,CAAAtG,MAAM,GAAC,IAAI,CAAA,CAAA;EACtD;EAEA,MAAMtC,OAAOyB,OAAQ,EAAA;EAEd,OAAA+J,YAAA;AACT,CAAA;AC1HO,MAAMC,MAAoC,GAAA,MAAAC,KAAA,IAA4B;EAAA,IAArB;IAAC1B,MAAA;IAAQhK;GAAY,GAAA0L,KAAA;EAC3E,IAAIF,YAA6C,GAAA,MAAA;EAEhC,WAAA,MAAA;IAACH;IAAgB,GAAG/I;OAAWtC,MAAO,CAAAsB,MAAA,CAAOe,YAAc,EAAA;IAC1E,IAAIC,OAAOF,KAAU,KAAA,OAAA,EAAwBoJ,YAAA,GAAA,OAAA;IACzC,IAAAlJ,MAAA,CAAOF,KAAU,KAAA,SAAA,IAAaoJ,YAAiB,KAAA,OAAA,EAAwBA,YAAA,GAAA,SAAA;IAEvE,IAAAlJ,MAAA,CAAOJ,QAAQ5C,MAAQ,EAAA;MACzB0K,MAAA,CAAOsB,KAAM,CAAAxH,IAAA,CAAKE,SAAU,CAAA1B,MAAM,CAAC,CAAA;IACrC;EACF;EAEA,MAAMtC,OAAOyB,OAAQ,EAAA;EAEd,OAAA+J,YAAA;AACT,CAAA;ACdA,eAAeG,eAAkBC,QAA4B,EAAA;EAC3D,MAAMT,UAAe,EAAC;EACtB,WAAA,MAAiBU,IAAQ,IAAAD,QAAA,EAAUT,OAAA,CAAQlM,KAAK4M,IAAI,CAAA;EAC7C,OAAAV,OAAA;AACT;AAEO,MAAMW,IAAkC,GAAA,MAAAC,KAAA,IAA4B;EAAA,IAArB;IAAC/B,MAAA;IAAQhK;GAAY,GAAA+L,KAAA;EACzE,MAAMZ,UAAU,MAAMQ,cAAA,CAAe3L,MAAO,CAAAsB,MAAA,CAAOe,YAAY,CAAA;EAC/D,MAAM2J,YAAYb,OAEf,CAAA3E,MAAA,CAAOyF,KAAA;IAAA,IAAC;MAAC/J;IAAa,CAAA,GAAA+J,KAAA;IAAA,OAAA/J,OAAA,CAAQ5C,MAAM;EAAA,EAAA,CAEpCoJ,IAAIwD,KAAA;IAAA,IAAC;MAACb;MAAgB,GAAG/I;IAAA;WAAYA,MAAM;EAAA,EAAA;EAE9C,MAAMtC,OAAOyB,OAAQ,EAAA;EAErBuI,MAAA,CAAOsB,KAAM,CAAAxH,IAAA,CAAKE,SAAU,CAAAgI,SAAS,CAAC,CAAA;EAEtC,IAAIR,YAA6C,GAAA,MAAA;EAEtC,KAAA,MAAA;IAACpJ;EAAK,CAAA,IAAK4J,SAAW,EAAA;IAC/B,IAAI5J,KAAU,KAAA,OAAA,EAAwBoJ,YAAA,GAAA,OAAA;IAClC,IAAApJ,KAAA,KAAU,aAAaoJ,YAAiB,KAAA,OAAA,EAAwBA,YAAA,GAAA,SAAA;EACtE;EAEO,OAAAA,YAAA;AACT,CAAA;ACzBO,MAAMW,SAAY,GAAA;EAACrC,MAAQ;EAAA2B,MAAA;EAAQK;AAAI,CAAA;ACwB9C,eAA8BM,eAC5BC,IACA,EAAAC,MAAA,EACe;EAAA,IADf;IAACC;IAAWzJ,OAAS;IAAAkH,MAAA;IAAQwC;GACd,GAAAF,MAAA;EACf,MAAMrC,QAAQoC,IAAK,CAAAI,UAAA;EACnB,MAAMC,cAAiB,GAAAjG,OAAA,CAAQwD,KAAM,CAAA0C,GAAA,IAAO1C,MAAM2C,CAAC,CAAA;EAEnD,IAAI,CAACF,cAAgB,EAAA;IACZ1C,MAAA,CAAAsB,KAAA,CACL,EAAG,CAAA5G,MAAA,CAAAiC,KAAA,CAAMM,MAAO,CAAA,EAAA,CAAGvC,MAAW,CAAA2B,UAAA,CAAAhC,OAAA,EAAO,WAAW,CAAA,CAAA,EAAC,gBAC/C,CAAA,CAAAK,MAAA,CAAAuF,KAAA,CAAMM,IACF,GAAA,0CAAA,GACA,6CACN,yDACE,CAAA,GAAA,kCAAA,CACJ;IACAP,MAAA,CAAOsB,MAAM,uBAAuB,CAAA;IAC7BtB,MAAA,CAAAsB,KAAA,CACL,kGAAA,CACF;IACOtB,MAAA,CAAAsB,KAAA,CACL,yGAAA,CACF;IACOtB,MAAA,CAAAsB,KAAA,CACL,mGAAA,CACF;IACOtB,MAAA,CAAAsB,KAAA,CACL,uFAAA,CACF;IACA,IAAIrB,MAAMM,IAAM,EAAA;MACPP,MAAA,CAAAsB,KAAA,CACL,8FAAA,CACF;IACF;IAEM,MAAAuB,SAAA,GAAY,MAAML,MAAA,CAAOM,MAAgB,CAAA;MAC7ClN,IAAM,EAAA,SAAA;MACNV,OAAS,EAAA,oCAAA;MACT6N,OAAS,EAAA;IAAA,CACV,CAAA;IAED,IAAI,CAACF,SAAW,EAAA;MACd7C,MAAA,CAAOsB,MAAM,cAAc,CAAA;MAC3BvI,OAAA,CAAQiK,QAAW,GAAA,CAAA;MACnB;IACF;EACF;EAEA,IAAI/C,KAAM,CAAA7E,MAAA,IAAU,EAAE6E,KAAA,CAAM7E,UAAU+G,SAAY,CAAA,EAAA;IAChD,MAAMc,SAAY,GAAA,IAAInI,IAAK,CAAAoI,UAAA,CAAW,OAAS,EAAA;MAC7ClI,KAAO,EAAA,MAAA;MACPpF,IAAM,EAAA;IAAA,CACP,CAAA;IACD,MAAM,IAAI4D,KAAA,CACR,4BAA6B,CAAAkB,MAAA,CAAAuF,KAAA,CAAM7E,MAAM,EAAA,2BAAA,CAAA,CAA4BV,MAAU,CAAAuI,SAAA,CAAA7H,MAAA,CAC7E+H,MAAA,CAAOC,KAAKjB,SAAS,CAAA,CAAEzD,IAAK2E,GAAA,IAAQ,GAAI,CAAA3I,MAAA,CAAA2I,GAAA,EAAG,GAAG,CAAA,CAAA,CAChD,CAAA,CACF;EACF;EAEM,MAAAjL,KAAA,GAAQ6H,MAAM7H,KAAS,IAAA,SAAA;EAE7B,IAAIA,KAAU,KAAA,OAAA,IAAWA,KAAU,KAAA,SAAA,IAAaA,UAAU,MAAQ,EAAA;IAC1D,MAAA,IAAIoB,MAAM,qEAAqE,CAAA;EACvF;EAEM,MAAAN,8BAAA,GAAiC+G,MAAM,mCAAmC,CAAA;EAE9E,IAAA/G,8BAAA,IACA,OAAOA,8BAAmC,KAAA,QAAA,IAC1C,CAACoK,MAAO,CAAAC,SAAA,CAAUrK,8BAA8B,CAChD,EAAA;IACM,MAAA,IAAIM,MAAM,2DAA2D,CAAA;EAC7E;EAEA,MAAMd,YAAsC,GAAA;IAC1C,GAAG6J,SAAU,CAAA;MACXiB,WAAa,EAAA,IAAA;MACbC,cAAgB,EAAA;MAAA;IACjB,CAAA,EAAEC,MAAO,CAAA,CAAA;IAAA;IAAA;IAAA;IAIVC,kBAAoB,EAAA,IAAA;IAAA;IAAA;IAAA;IAIpBC,yBAA2B,EAAA;EAAA,CAC7B;EAEI,IAAAzK,cAAA;EACJ,IAAI8G,MAAMM,IAAM,EAAA;IACV,IAAA,OAAON,KAAM,CAAAM,IAAA,KAAS,QAAU,EAAA;MAC5B,MAAA,IAAI/G,MAAM,2BAA2B,CAAA;IAC7C;IACA,MAAMqK,QAAW,GAAAtK,IAAA,CAAK/D,OAAQ,CAAAsD,OAAA,EAASmH,MAAMM,IAAI,CAAA;IAEjD,MAAMuD,IAAO,GAAA,MAAMC,EAAG,CAAAC,QAAA,CAASF,KAAKD,QAAQ,CAAA;IACxC,IAAA,CAACC,IAAK,CAAAG,MAAA,EAAU,EAAA;MACZ,MAAA,IAAIzK,MAAM,uDAAuD,CAAA;IACzE;IAEiBL,cAAA,GAAA0K,QAAA;EACnB;EAEM,MAAArC,YAAA,GAAe,MAAMjJ,iBAAkB,CAAA;IAC3CE,WAAWwH,KAAM,CAAAxH,SAAA;IACjBG,SAASqH,KAAM,CAAArH,OAAA;IACfF,YAAA;IACAI,OAAA;IACAV,KAAA;IACAc,8BAAA;IACAC,cAAA;IACAF,QAAA,EAAWjD,MAAW,IAAA;MACd,MAAAiD,QAAA,GACJgH,KAAM,CAAA7E,MAAA,IAAU6E,KAAM,CAAA7E,MAAA,IAAU+G,YAC5BA,SAAU,CAAAlC,KAAA,CAAM7E,MAAgC,CAAA,GAChD+G,SAAU,CAAArC,MAAA;MAEhB,OAAO7G,QAAS,CAAA;QAAC+G,MAAQ;QAAAhK,MAAA;QAAQiK;MAAM,CAAA,CAAA;IACzC;EAAA,CACD,CAAA;EAEOlH,OAAA,CAAAiK,QAAA,GAAWxB,YAAiB,KAAA,OAAA,GAAU,CAAI,GAAA,CAAA;AACpD;"}