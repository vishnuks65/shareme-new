{"version":3,"file":"1.mjs","sources":["../src/values/Path.ts","../src/values/StreamValue.ts","../src/values/dateHelpers.ts","../src/values/utils.ts","../src/evaluator/equality.ts","../src/evaluator/matching.ts","../src/evaluator/ordering.ts","../src/evaluator/operators.ts","../src/evaluator/scope.ts","../src/evaluator/evaluate.ts","../src/evaluator/constantEvaluate.ts","../src/evaluator/pt.ts","../src/evaluator/scoring.ts","../src/evaluator/functions.ts","../src/markProcessor.ts","../src/rawParser.js","../src/traversal.ts","../src/parser.ts"],"sourcesContent":["function escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nfunction pathRegExp(pattern: string) {\n  const re = []\n  for (const part of pattern.split('.')) {\n    if (part === '*') {\n      re.push('[^.]+')\n    } else if (part === '**') {\n      re.push('.*')\n    } else {\n      re.push(escapeRegExp(part))\n    }\n  }\n\n  return new RegExp(`^${re.join('.')}$`)\n}\n\nexport class Path {\n  private pattern: string\n  private patternRe: RegExp\n\n  constructor(pattern: string) {\n    this.pattern = pattern\n    this.patternRe = pathRegExp(pattern)\n  }\n\n  matches(str: string): boolean {\n    return this.patternRe.test(str)\n  }\n\n  toJSON(): string {\n    return this.pattern\n  }\n}\n","import type {Value} from './types'\n\nexport class StreamValue {\n  type: 'stream' = 'stream'\n  private generator: () => AsyncGenerator<Value, void, unknown>\n  private ticker: Promise<void> | null\n  private isDone: boolean\n  private data: Value[]\n\n  constructor(generator: () => AsyncGenerator<Value, void, unknown>) {\n    this.generator = generator\n    this.ticker = null\n    this.isDone = false\n    this.data = []\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isArray(): boolean {\n    return true\n  }\n\n  async get(): Promise<any> {\n    const result = []\n    for await (const value of this) {\n      result.push(await value.get())\n    }\n    return result\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<Value, void, unknown> {\n    let i = 0\n    while (true) {\n      for (; i < this.data.length; i++) {\n        yield this.data[i]\n      }\n\n      if (this.isDone) {\n        return\n      }\n\n      await this._nextTick()\n    }\n  }\n\n  _nextTick(): Promise<void> {\n    if (this.ticker) {\n      return this.ticker\n    }\n\n    let currentResolver: (value?: void | PromiseLike<void> | undefined) => void\n    const setupTicker = () => {\n      this.ticker = new Promise((resolve) => {\n        currentResolver = resolve\n      })\n    }\n\n    const tick = () => {\n      currentResolver()\n      setupTicker()\n    }\n\n    const fetch = async () => {\n      for await (const value of this.generator()) {\n        this.data.push(value)\n        tick()\n      }\n\n      this.isDone = true\n      tick()\n    }\n\n    setupTicker()\n    fetch()\n    return this.ticker!\n  }\n}\n","const RFC3339_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([-+]\\d{2}:\\d{2}))$/\n\nexport function parseRFC3339(str: string): Date | null {\n  if (RFC3339_REGEX.test(str)) {\n    return new Date(str)\n  }\n  return null\n}\n\nexport function formatRFC3339(d: Date): string {\n  const year = addLeadingZero(d.getUTCFullYear(), 4)\n  const month = addLeadingZero(d.getUTCMonth() + 1, 2)\n  const day = addLeadingZero(d.getUTCDate(), 2)\n  const hour = addLeadingZero(d.getUTCHours(), 2)\n  const minute = addLeadingZero(d.getUTCMinutes(), 2)\n  const second = addLeadingZero(d.getUTCSeconds(), 2)\n\n  let fractionalSecond = ''\n  const millis = d.getMilliseconds()\n  if (millis != 0) {\n    fractionalSecond = `.${addLeadingZero(millis, 3)}`\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}Z`\n}\n\ntype Stringer = {\n  toString(): string\n}\n\nfunction addLeadingZero(num: Stringer, targetLength: number) {\n  let str = num.toString()\n  while (str.length < targetLength) {\n    str = `0${str}`\n  }\n  return str\n}\n","import {formatRFC3339, parseRFC3339} from './dateHelpers'\nimport {Path} from './Path'\nimport {StreamValue} from './StreamValue'\nimport {BooleanValue, GroqType, NullValue, Value} from './types'\n\nexport class StaticValue<P, T extends GroqType> {\n  data: P\n  type: T\n\n  constructor(data: P, type: T) {\n    this.data = data\n    this.type = type\n  }\n\n  isArray(): boolean {\n    return this.type === 'array'\n  }\n\n  // eslint-disable-next-line require-await\n  async get(): Promise<any> {\n    return this.data\n  }\n\n  [Symbol.asyncIterator](): Generator<Value, void, unknown> {\n    if (Array.isArray(this.data)) {\n      return (function* (data) {\n        for (const element of data) {\n          yield fromJS(element)\n        }\n      })(this.data)\n    }\n    throw new Error(`Cannot iterate over: ${this.type}`)\n  }\n}\n\nexport const NULL_VALUE: NullValue = new StaticValue(null, 'null')\nexport const TRUE_VALUE: BooleanValue = new StaticValue(true, 'boolean')\nexport const FALSE_VALUE: BooleanValue = new StaticValue(false, 'boolean')\n\nexport class DateTime {\n  date: Date\n\n  constructor(date: Date) {\n    this.date = date\n  }\n\n  static parseToValue(str: string): Value {\n    const date = parseRFC3339(str)\n    if (date) {\n      return new StaticValue(new DateTime(date), 'datetime')\n    }\n    return NULL_VALUE\n  }\n\n  equals(other: DateTime): boolean {\n    return this.date.getTime() == other.date.getTime()\n  }\n\n  add(secs: number): DateTime {\n    const copy = new Date(this.date.getTime())\n    copy.setTime(copy.getTime() + secs * 1000)\n    return new DateTime(copy)\n  }\n\n  difference(other: DateTime): number {\n    return (this.date.getTime() - other.date.getTime()) / 1000\n  }\n\n  compareTo(other: DateTime): number {\n    return this.date.getTime() - other.date.getTime()\n  }\n\n  toString(): string {\n    return formatRFC3339(this.date)\n  }\n\n  toJSON(): string {\n    return this.toString()\n  }\n}\n\nexport function fromNumber(num: number): Value {\n  if (Number.isFinite(num)) {\n    return new StaticValue(num, 'number')\n  }\n  return NULL_VALUE\n}\n\nexport function fromString(str: string): Value {\n  return new StaticValue(str, 'string')\n}\n\nexport function fromDateTime(dt: DateTime): Value {\n  return new StaticValue(dt, 'datetime')\n}\n\nexport function fromPath(path: Path): Value {\n  return new StaticValue(path, 'path')\n}\n\nfunction isIterator(obj?: Iterator<any>) {\n  return obj && typeof obj.next === 'function'\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function fromJS(val: any): Value {\n  if (isIterator(val)) {\n    return new StreamValue(async function* () {\n      for await (const value of val) {\n        yield fromJS(value)\n      }\n    })\n  } else if (val === null || val === undefined) {\n    return NULL_VALUE\n  }\n  return new StaticValue(val, getType(val)) as any\n}\n\n/**\n * Returns the type of the value.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getType(data: any): GroqType {\n  if (data === null || typeof data === 'undefined') {\n    return 'null'\n  }\n  if (Array.isArray(data)) {\n    return 'array'\n  }\n  if (data instanceof Path) {\n    return 'path'\n  }\n  if (data instanceof DateTime) {\n    return 'datetime'\n  }\n  return typeof data as GroqType\n}\n","import {Value} from '../values'\n\nexport function isEqual(a: Value, b: Value): boolean {\n  if (\n    (a.type === 'string' && b.type === 'string') ||\n    (a.type === 'boolean' && b.type === 'boolean') ||\n    (a.type === 'null' && b.type === 'null') ||\n    (a.type === 'number' && b.type === 'number')\n  ) {\n    return a.data === b.data\n  }\n\n  if (a.type === 'datetime' && b.type === 'datetime') {\n    return a.data.equals(b.data)\n  }\n\n  return false\n}\n","import {Value} from '../values'\n\nconst CHARS = /([^!@#$%^&*(),\\\\/?\";:{}|[\\]+<>\\s-])+/g\nconst CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\\\/?\";:{}|[\\]+<>\\s-])+/g\nconst EDGE_CHARS = /(\\b\\.+|\\.+\\b)/g\nconst MAX_TERM_LENGTH = 1024\n\nexport type Token = string\n\nexport type Pattern = (tokens: Token[]) => boolean\n\nexport function matchText(tokens: Token[], patterns: Pattern[]): boolean {\n  if (tokens.length === 0 || patterns.length === 0) {\n    return false\n  }\n\n  return patterns.every((pattern) => pattern(tokens))\n}\n\nexport function matchTokenize(text: string): Token[] {\n  return text.replace(EDGE_CHARS, '').match(CHARS) || []\n}\n\nexport function matchAnalyzePattern(text: string): Pattern[] {\n  const termsRe = matchPatternRegex(text)\n  return termsRe.map((re) => (tokens: Token[]) => tokens.some((token) => re.test(token)))\n}\n\nexport function matchPatternRegex(text: string): RegExp[] {\n  const terms = text.replace(EDGE_CHARS, '').match(CHARS_WITH_WILDCARD) || []\n  return terms.map(\n    (term) => new RegExp(`^${term.slice(0, MAX_TERM_LENGTH).replace(/\\*/g, '.*')}$`, 'i'),\n  )\n}\n\nexport async function gatherText(value: Value, cb: (str: string) => void): Promise<boolean> {\n  if (value.type === 'string') {\n    cb(value.data)\n    return true\n  }\n\n  if (value.isArray()) {\n    let success = true\n    for await (const part of value) {\n      if (part.type === 'string') {\n        cb(part.data)\n      } else {\n        success = false\n      }\n    }\n    return success\n  }\n\n  return false\n}\n","import {getType, GroqType} from '../values'\n\nconst TYPE_ORDER: {[key in GroqType]?: number} = {\n  datetime: 1,\n  number: 2,\n  string: 3,\n  boolean: 4,\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function partialCompare(a: any, b: any): null | number {\n  const aType = getType(a)\n  const bType = getType(b)\n\n  if (aType !== bType) {\n    return null\n  }\n\n  switch (aType) {\n    case 'number':\n    case 'boolean':\n      return a - b\n    case 'string':\n      if (a < b) return -1\n      if (a > b) return 1\n      return 0\n    case 'datetime':\n      return a.compareTo(b)\n    default:\n      return null\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function totalCompare(a: any, b: any): number {\n  const aType = getType(a)\n  const bType = getType(b)\n\n  const aTypeOrder = TYPE_ORDER[aType] || 100\n  const bTypeOrder = TYPE_ORDER[bType] || 100\n\n  if (aTypeOrder !== bTypeOrder) {\n    return aTypeOrder - bTypeOrder\n  }\n\n  let result = partialCompare(a, b)\n  if (result === null) {\n    result = 0\n  }\n  return result\n}\n","import {OpCall} from '../nodeTypes'\nimport {\n  FALSE_VALUE,\n  fromDateTime,\n  fromJS,\n  fromNumber,\n  fromString,\n  NULL_VALUE,\n  StreamValue,\n  TRUE_VALUE,\n  Value,\n} from '../values'\nimport {isEqual} from './equality'\nimport {gatherText, matchAnalyzePattern, matchText, matchTokenize, Pattern, Token} from './matching'\nimport {partialCompare} from './ordering'\n\ntype GroqOperatorFn = (left: Value, right: Value) => Value | PromiseLike<Value>\n\nexport const operators: {[key in OpCall]: GroqOperatorFn} = {\n  '==': function eq(left, right) {\n    return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  '!=': function neq(left, right) {\n    return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE\n  },\n\n  '>': function gt(left, right) {\n    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE\n    const result = partialCompare(left.data, right.data)\n\n    if (result === null) {\n      return NULL_VALUE\n    }\n    return result > 0 ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  '>=': function gte(left, right) {\n    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE\n    const result = partialCompare(left.data, right.data)\n\n    if (result === null) {\n      return NULL_VALUE\n    }\n    return result >= 0 ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  '<': function lt(left, right) {\n    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE\n    const result = partialCompare(left.data, right.data)\n\n    if (result === null) {\n      return NULL_VALUE\n    }\n    return result < 0 ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  '<=': function lte(left, right) {\n    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE\n    const result = partialCompare(left.data, right.data)\n\n    if (result === null) {\n      return NULL_VALUE\n    }\n    return result <= 0 ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  // eslint-disable-next-line func-name-matching\n  in: async function inop(left, right) {\n    if (right.type === 'path') {\n      if (left.type !== 'string') {\n        return NULL_VALUE\n      }\n\n      return right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE\n    }\n\n    if (right.isArray()) {\n      for await (const b of right) {\n        if (isEqual(left, b)) {\n          return TRUE_VALUE\n        }\n      }\n\n      return FALSE_VALUE\n    }\n\n    return NULL_VALUE\n  },\n\n  match: async function match(left, right) {\n    let tokens: Token[] = []\n    let patterns: Pattern[] = []\n\n    await gatherText(left, (part) => {\n      tokens = tokens.concat(matchTokenize(part))\n    })\n\n    const didSucceed = await gatherText(right, (part) => {\n      patterns = patterns.concat(matchAnalyzePattern(part))\n    })\n    if (!didSucceed) {\n      return FALSE_VALUE\n    }\n\n    const matched = matchText(tokens, patterns)\n\n    return matched ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  '+': function plus(left, right) {\n    if (left.type === 'datetime' && right.type === 'number') {\n      return fromDateTime(left.data.add(right.data))\n    }\n\n    if (left.type === 'number' && right.type === 'number') {\n      return fromNumber(left.data + right.data)\n    }\n\n    if (left.type === 'string' && right.type === 'string') {\n      return fromString(left.data + right.data)\n    }\n\n    if (left.type === 'object' && right.type === 'object') {\n      return fromJS({...left.data, ...right.data})\n    }\n\n    if (left.type === 'array' && right.type === 'array') {\n      return fromJS(left.data.concat(right.data))\n    }\n\n    if (left.isArray() && right.isArray()) {\n      return new StreamValue(async function* () {\n        for await (const val of left) {\n          yield val\n        }\n\n        for await (const val of right) {\n          yield val\n        }\n      })\n    }\n\n    return NULL_VALUE\n  },\n\n  '-': function minus(left, right) {\n    if (left.type === 'datetime' && right.type === 'number') {\n      return fromDateTime(left.data.add(-right.data))\n    }\n\n    if (left.type === 'datetime' && right.type === 'datetime') {\n      return fromNumber(left.data.difference(right.data))\n    }\n\n    if (left.type === 'number' && right.type === 'number') {\n      return fromNumber(left.data - right.data)\n    }\n\n    return NULL_VALUE\n  },\n\n  '*': numericOperator((a, b) => a * b),\n  '/': numericOperator((a, b) => a / b),\n  '%': numericOperator((a, b) => a % b),\n  '**': numericOperator((a, b) => Math.pow(a, b)),\n}\n\nfunction numericOperator(impl: (a: number, b: number) => number): GroqOperatorFn {\n  return function (left, right) {\n    if (left.type === 'number' && right.type === 'number') {\n      const result = impl(left.data, right.data)\n      return fromNumber(result)\n    }\n\n    return NULL_VALUE\n  }\n}\n","import {Value} from '../values'\nimport {Context} from './types'\n\nexport class Scope {\n  public params: Record<string, unknown>\n  public source: Value\n  public value: Value\n  public parent: Scope | null\n  public context: Context\n  public isHidden = false\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(\n    params: Record<string, unknown>,\n    source: Value,\n    value: Value,\n    context: Context,\n    parent: Scope | null,\n  ) {\n    this.params = params\n    this.source = source\n    this.value = value\n    this.context = context\n    this.parent = parent\n  }\n\n  createNested(value: Value): Scope {\n    if (this.isHidden) {\n      return new Scope(this.params, this.source, value, this.context, this.parent)\n    }\n    return new Scope(this.params, this.source, value, this.context, this)\n  }\n\n  createHidden(value: Value): Scope {\n    const result = this.createNested(value)\n    result.isHidden = true\n    return result\n  }\n}\n","import {ExprNode, FuncCallNode, PipeFuncCallNode} from '../nodeTypes'\nimport {\n  FALSE_VALUE,\n  fromJS,\n  fromNumber,\n  NULL_VALUE,\n  StreamValue,\n  TRUE_VALUE,\n  Value,\n} from '../values'\nimport {operators} from './operators'\nimport {partialCompare} from './ordering'\nimport {Scope} from './scope'\nimport {EvaluateOptions, Executor} from './types'\n\nexport function evaluate(\n  node: ExprNode,\n  scope: Scope,\n  execute: Executor = evaluate,\n): Value | PromiseLike<Value> {\n  const func = EXECUTORS[node.type]\n  return func(node as any, scope, execute)\n}\n\ntype NarrowNode<T, N> = T extends {type: N} ? T : never\n\ntype ExecutorMap = {\n  [key in ExprNode['type']]: (\n    node: NarrowNode<ExprNode, key>,\n    scope: Scope,\n    exec: Executor,\n  ) => Value | PromiseLike<Value>\n}\n\n/**\n * Applies the function to a value, but tries to avoid creating unnecessary promises.\n */\nfunction promiselessApply(\n  value: Value | PromiseLike<Value>,\n  cb: (val: Value) => Value,\n): Value | PromiseLike<Value> {\n  if ('then' in value) {\n    return value.then(cb)\n  }\n\n  return cb(value)\n}\n\nconst EXECUTORS: ExecutorMap = {\n  This(_, scope) {\n    return scope.value\n  },\n\n  Selector() {\n    // These should be evaluated separely using a different evaluator.\n    // At the mooment we haven't implemented this.\n    throw new Error('Selectors can not be evaluated')\n  },\n\n  Everything(_, scope) {\n    return scope.source\n  },\n\n  Parameter({name}, scope) {\n    return fromJS(scope.params[name])\n  },\n\n  Context({key}, scope) {\n    if (key === 'before' || key === 'after') {\n      const value = scope.context[key]\n      return value || NULL_VALUE\n    }\n    throw new Error(`unknown context key: ${key}`)\n  },\n\n  Parent({n}, scope) {\n    let current = scope\n    for (let i = 0; i < n; i++) {\n      if (!current.parent) {\n        return NULL_VALUE\n      }\n\n      current = current.parent\n    }\n    return current.value\n  },\n\n  OpCall({op, left, right}, scope, execute) {\n    const func = operators[op]\n    if (!func) {\n      throw new Error(`Unknown operator: ${op}`)\n    }\n    const leftValue = execute(left, scope)\n    const rightValue = execute(right, scope)\n\n    // Avoid uneccesary promises\n    // This is required for constant evaluation to work correctly.\n    if ('then' in leftValue || 'then' in rightValue) {\n      return (async () => func(await leftValue, await rightValue))()\n    }\n\n    return func(leftValue, rightValue)\n  },\n\n  async Select({alternatives, fallback}, scope, execute) {\n    for (const alt of alternatives) {\n      const altCond = await execute(alt.condition, scope)\n      if (altCond.type === 'boolean' && altCond.data === true) {\n        return execute(alt.value, scope)\n      }\n    }\n\n    if (fallback) {\n      return execute(fallback, scope)\n    }\n\n    return NULL_VALUE\n  },\n\n  async InRange({base, left, right, isInclusive}, scope, execute) {\n    const value = await execute(base, scope)\n    const leftValue = await execute(left, scope)\n    const rightValue = await execute(right, scope)\n\n    const leftCmp = partialCompare(await value.get(), await leftValue.get())\n    if (leftCmp === null) {\n      return NULL_VALUE\n    }\n    const rightCmp = partialCompare(await value.get(), await rightValue.get())\n    if (rightCmp === null) {\n      return NULL_VALUE\n    }\n\n    if (isInclusive) {\n      return leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE\n    }\n\n    return leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE\n  },\n\n  async Filter({base, expr}, scope, execute) {\n    const baseValue = await execute(base, scope)\n    if (!baseValue.isArray()) {\n      return NULL_VALUE\n    }\n    return new StreamValue(async function* () {\n      for await (const elem of baseValue) {\n        const newScope = scope.createNested(elem)\n        const exprValue = await execute(expr, newScope)\n        if (exprValue.type === 'boolean' && exprValue.data === true) {\n          yield elem\n        }\n      }\n    })\n  },\n\n  async Projection({base, expr}, scope, execute) {\n    const baseValue = await execute(base, scope)\n    if (baseValue.type !== 'object') {\n      return NULL_VALUE\n    }\n\n    const newScope = scope.createNested(baseValue)\n    return execute(expr, newScope)\n  },\n\n  FuncCall({func, args}: FuncCallNode, scope: Scope, execute) {\n    return func(args, scope, execute)\n  },\n\n  async PipeFuncCall({func, base, args}: PipeFuncCallNode, scope: Scope, execute) {\n    const baseValue = await execute(base, scope)\n    return func(baseValue, args, scope, execute)\n  },\n\n  async AccessAttribute({base, name}, scope, execute) {\n    let value = scope.value\n    if (base) {\n      value = await execute(base, scope)\n    }\n    if (value.type === 'object') {\n      if (value.data.hasOwnProperty(name)) {\n        return fromJS(value.data[name])\n      }\n    }\n\n    return NULL_VALUE\n  },\n\n  async AccessElement({base, index}, scope, execute) {\n    const baseValue = await execute(base, scope)\n    if (!baseValue.isArray()) {\n      return NULL_VALUE\n    }\n\n    const data = await baseValue.get()\n    const finalIndex = index < 0 ? index + data.length : index\n    return fromJS(data[finalIndex])\n  },\n\n  async Slice({base, left, right, isInclusive}, scope, execute) {\n    const baseValue = await execute(base, scope)\n\n    if (!baseValue.isArray()) {\n      return NULL_VALUE\n    }\n\n    // OPT: Here we can optimize when either indices are >= 0\n    const array = (await baseValue.get()) as any[]\n\n    let leftIdx = left\n    let rightIdx = right\n\n    // Handle negative index\n    if (leftIdx < 0) {\n      leftIdx = array.length + leftIdx\n    }\n    if (rightIdx < 0) {\n      rightIdx = array.length + rightIdx\n    }\n\n    // Convert from inclusive to exclusive index\n    if (isInclusive) {\n      rightIdx++\n    }\n\n    if (leftIdx < 0) {\n      leftIdx = 0\n    }\n    if (rightIdx < 0) {\n      rightIdx = 0\n    }\n\n    // Note: At this point the indices might point out-of-bound, but\n    // .slice handles this correctly.\n\n    return fromJS(array.slice(leftIdx, rightIdx))\n  },\n\n  async Deref({base}, scope, execute) {\n    const value = await execute(base, scope)\n\n    if (!scope.source.isArray()) {\n      return NULL_VALUE\n    }\n\n    if (value.type !== 'object') {\n      return NULL_VALUE\n    }\n\n    const id = value.data._ref\n    if (typeof id !== 'string') {\n      return NULL_VALUE\n    }\n\n    if (scope.context.dereference) {\n      return fromJS(await scope.context.dereference({_ref: id}))\n    }\n\n    for await (const doc of scope.source) {\n      if (doc.type === 'object' && id === doc.data._id) {\n        return doc\n      }\n    }\n\n    return NULL_VALUE\n  },\n\n  Value({value}) {\n    return fromJS(value)\n  },\n\n  Group({base}, scope, execute) {\n    return execute(base, scope)\n  },\n\n  async Object({attributes}, scope, execute) {\n    const result: {[key: string]: any} = {}\n    for (const attr of attributes) {\n      const attrType = attr.type\n      switch (attr.type) {\n        case 'ObjectAttributeValue': {\n          const value = await execute(attr.value, scope)\n          result[attr.name] = await value.get()\n          break\n        }\n\n        case 'ObjectConditionalSplat': {\n          const cond = await execute(attr.condition, scope)\n          if (cond.type !== 'boolean' || cond.data === false) {\n            continue\n          }\n\n          const value = await execute(attr.value, scope)\n          if (value.type === 'object') {\n            Object.assign(result, value.data)\n          }\n          break\n        }\n\n        case 'ObjectSplat': {\n          const value = await execute(attr.value, scope)\n          if (value.type === 'object') {\n            Object.assign(result, value.data)\n          }\n          break\n        }\n\n        default:\n          throw new Error(`Unknown node type: ${attrType}`)\n      }\n    }\n    return fromJS(result)\n  },\n\n  Array({elements}, scope, execute) {\n    return new StreamValue(async function* () {\n      for (const element of elements) {\n        const value = await execute(element.value, scope)\n        if (element.isSplat) {\n          if (value.isArray()) {\n            for await (const v of value) {\n              yield v\n            }\n          }\n        } else {\n          yield value\n        }\n      }\n    })\n  },\n\n  Tuple() {\n    throw new Error('tuples can not be evaluated')\n  },\n\n  async Or({left, right}, scope, execute) {\n    const leftValue = await execute(left, scope)\n    const rightValue = await execute(right, scope)\n\n    if (leftValue.type === 'boolean') {\n      if (leftValue.data === true) {\n        return TRUE_VALUE\n      }\n    }\n\n    if (rightValue.type === 'boolean') {\n      if (rightValue.data === true) {\n        return TRUE_VALUE\n      }\n    }\n\n    if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {\n      return NULL_VALUE\n    }\n\n    return FALSE_VALUE\n  },\n\n  async And({left, right}, scope, execute) {\n    const leftValue = await execute(left, scope)\n    const rightValue = await execute(right, scope)\n\n    if (leftValue.type === 'boolean') {\n      if (leftValue.data === false) {\n        return FALSE_VALUE\n      }\n    }\n\n    if (rightValue.type === 'boolean') {\n      if (rightValue.data === false) {\n        return FALSE_VALUE\n      }\n    }\n\n    if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {\n      return NULL_VALUE\n    }\n\n    return TRUE_VALUE\n  },\n\n  async Not({base}, scope, execute) {\n    const value = await execute(base, scope)\n    if (value.type !== 'boolean') {\n      return NULL_VALUE\n    }\n    return value.data ? FALSE_VALUE : TRUE_VALUE\n  },\n\n  Neg({base}, scope, execute) {\n    return promiselessApply(execute(base, scope), (value) => {\n      if (value.type !== 'number') {\n        return NULL_VALUE\n      }\n      return fromNumber(-value.data)\n    })\n  },\n\n  Pos({base}, scope, execute) {\n    return promiselessApply(execute(base, scope), (value) => {\n      if (value.type !== 'number') {\n        return NULL_VALUE\n      }\n      return fromNumber(value.data)\n    })\n  },\n\n  Asc() {\n    return NULL_VALUE\n  },\n\n  Desc() {\n    return NULL_VALUE\n  },\n\n  async ArrayCoerce({base}, scope, execute) {\n    const value = await execute(base, scope)\n    return value.isArray() ? value : NULL_VALUE\n  },\n\n  async Map({base, expr}, scope, execute) {\n    const value = await execute(base, scope)\n    if (!value.isArray()) {\n      return NULL_VALUE\n    }\n\n    return new StreamValue(async function* () {\n      for await (const elem of value) {\n        const newScope = scope.createHidden(elem)\n        yield await execute(expr, newScope)\n      }\n    })\n  },\n\n  async FlatMap({base, expr}, scope, execute) {\n    const value = await execute(base, scope)\n    if (!value.isArray()) {\n      return NULL_VALUE\n    }\n\n    return new StreamValue(async function* () {\n      for await (const elem of value) {\n        const newScope = scope.createHidden(elem)\n        const innerValue = await execute(expr, newScope)\n        if (innerValue.isArray()) {\n          for await (const inner of innerValue) {\n            yield inner\n          }\n        } else {\n          yield innerValue\n        }\n      }\n    })\n  },\n}\n\n/**\n * Evaluates a query.\n */\nexport function evaluateQuery(\n  tree: ExprNode,\n  options: EvaluateOptions = {},\n): Value | PromiseLike<Value> {\n  const root = fromJS(options.root)\n  const dataset = fromJS(options.dataset)\n  const params: {[key: string]: any} = {...options.params}\n\n  const scope = new Scope(\n    params,\n    dataset,\n    root,\n    {\n      timestamp: options.timestamp || new Date(),\n      identity: options.identity === undefined ? 'me' : options.identity,\n      sanity: options.sanity,\n      after: options.after ? fromJS(options.after) : null,\n      before: options.before ? fromJS(options.before) : null,\n      dereference: options.dereference,\n    },\n    null,\n  )\n  return evaluate(tree, scope)\n}\n","import {ExprNode} from '../nodeTypes'\nimport {NULL_VALUE, Value} from '../values'\nimport {evaluate} from './evaluate'\nimport {Scope} from './scope'\n\nfunction canConstantEvaluate(node: ExprNode): boolean {\n  switch (node.type) {\n    case 'Group':\n      return canConstantEvaluate(node.base)\n    case 'Value':\n    case 'Parameter':\n      return true\n    case 'Pos':\n    case 'Neg':\n      return canConstantEvaluate(node.base)\n    case 'OpCall':\n      switch (node.op) {\n        case '+':\n        case '-':\n        case '*':\n        case '/':\n        case '%':\n        case '**':\n          return canConstantEvaluate(node.left) && canConstantEvaluate(node.right)\n        default:\n          return false\n      }\n    default:\n      return false\n  }\n}\n\nconst DUMMY_SCOPE = new Scope(\n  {},\n  NULL_VALUE,\n  NULL_VALUE,\n  {timestamp: new Date(0), identity: 'me', before: null, after: null},\n  null,\n)\n\nexport function tryConstantEvaluate(node: ExprNode): Value | null {\n  if (!canConstantEvaluate(node)) {\n    return null\n  }\n\n  return constantEvaluate(node)\n}\n\nfunction constantEvaluate(node: ExprNode): Value {\n  const value = evaluate(node, DUMMY_SCOPE, constantEvaluate)\n  if ('then' in value) {\n    throw new Error('BUG: constant evaluate should never return a promise')\n  }\n  return value\n}\n","import {Value} from '../values'\n\nexport async function portableTextContent(value: Value): Promise<string | null> {\n  if (value.type === 'object') {\n    return blockText(value.data)\n  } else if (value.isArray()) {\n    const texts = await arrayText(value)\n    if (texts.length > 0) {\n      return texts.join('\\n\\n')\n    }\n  }\n\n  return null\n}\n\nasync function arrayText(value: Value, result: string[] = []): Promise<string[]> {\n  for await (const block of value) {\n    if (block.type === 'object') {\n      const text = blockText(block.data)\n      if (text !== null) result.push(text)\n    } else if (block.isArray()) {\n      await arrayText(block, result)\n    }\n  }\n\n  return result\n}\n\nfunction blockText(obj: Record<string, unknown>): string | null {\n  if (typeof obj._type !== 'string') return null\n  const children = obj.children\n  if (!Array.isArray(children)) return null\n\n  let result = ''\n  for (const child of children) {\n    if (\n      child &&\n      typeof child === 'object' &&\n      typeof child._type === 'string' &&\n      child._type === 'span' &&\n      typeof child.text === 'string'\n    ) {\n      result += child.text\n    }\n  }\n  return result\n}\n","import {ExprNode} from '../nodeTypes'\nimport {gatherText, matchPatternRegex, matchTokenize, Token} from './matching'\nimport {Scope} from './scope'\nimport {Executor} from './types'\n\n// BM25 similarity constants\nconst BM25k = 1.2\n\nexport async function evaluateScore(\n  node: ExprNode,\n  scope: Scope,\n  execute: Executor,\n): Promise<number> {\n  if (node.type === 'OpCall' && node.op === 'match') {\n    return evaluateMatchScore(node.left, node.right, scope, execute)\n  }\n\n  if (node.type === 'FuncCall' && node.name === 'boost') {\n    const innerScore = await evaluateScore(node.args[0], scope, execute)\n    const boost = await execute(node.args[1], scope)\n    if (boost.type === 'number' && innerScore > 0) {\n      return innerScore + boost.data\n    }\n\n    return 0\n  }\n\n  switch (node.type) {\n    case 'Or': {\n      const leftScore = await evaluateScore(node.left, scope, execute)\n      const rightScore = await evaluateScore(node.right, scope, execute)\n      return leftScore + rightScore\n    }\n    case 'And': {\n      const leftScore = await evaluateScore(node.left, scope, execute)\n      const rightScore = await evaluateScore(node.right, scope, execute)\n      if (leftScore === 0 || rightScore === 0) return 0\n      return leftScore + rightScore\n    }\n    default: {\n      const res = await execute(node, scope)\n      return res.type === 'boolean' && res.data === true ? 1 : 0\n    }\n  }\n}\n\nasync function evaluateMatchScore(\n  left: ExprNode,\n  right: ExprNode,\n  scope: Scope,\n  execute: Executor,\n): Promise<number> {\n  const text = await execute(left, scope)\n  const pattern = await execute(right, scope)\n\n  let tokens: Token[] = []\n  let terms: RegExp[] = []\n\n  await gatherText(text, (part) => {\n    tokens = tokens.concat(matchTokenize(part))\n  })\n\n  const didSucceed = await gatherText(pattern, (part) => {\n    terms = terms.concat(matchPatternRegex(part))\n  })\n\n  if (!didSucceed) {\n    return 0\n  }\n\n  if (tokens.length === 0 || terms.length === 0) {\n    return 0\n  }\n\n  let score = 0\n\n  for (const re of terms) {\n    const freq = tokens.reduce((c, token) => c + (re.test(token) ? 1 : 0), 0)\n    score += (freq * (BM25k + 1)) / (freq + BM25k)\n  }\n\n  return score\n}\n","import type {ExprNode} from '../nodeTypes'\nimport {\n  DateTime,\n  FALSE_VALUE,\n  fromDateTime,\n  fromJS,\n  fromNumber,\n  fromPath,\n  fromString,\n  getType,\n  NULL_VALUE,\n  Path,\n  StreamValue,\n  TRUE_VALUE,\n  Value,\n} from '../values'\nimport {totalCompare} from './ordering'\nimport {portableTextContent} from './pt'\nimport {Scope} from './scope'\nimport {evaluateScore} from './scoring'\nimport {Executor} from './types'\n\nfunction hasReference(value: any, pathSet: Set<string>): boolean {\n  switch (getType(value)) {\n    case 'array':\n      for (const v of value) {\n        if (hasReference(v, pathSet)) {\n          return true\n        }\n      }\n      break\n    case 'object':\n      if (value._ref) {\n        return pathSet.has(value._ref)\n      }\n      for (const v of Object.values(value)) {\n        if (hasReference(v, pathSet)) {\n          return true\n        }\n      }\n      break\n    default:\n  }\n  return false\n}\n\nfunction countUTF8(str: string): number {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i)\n    if (code >= 0xd800 && code <= 0xdbff) {\n      // High surrogate. Don't count this.\n      // By only counting the low surrogate we will correctly\n      // count the number of UTF-8 code points.\n      continue\n    }\n    count++\n  }\n  return count\n}\n\nexport type GroqFunctionArg = ExprNode\ntype WithOptions<T> = T & {\n  arity?: GroqFunctionArity\n  mode?: 'normal' | 'delta'\n}\n\nexport type GroqFunctionArity = number | ((count: number) => boolean)\n\nexport type GroqFunction = (\n  args: GroqFunctionArg[],\n  scope: Scope,\n  execute: Executor,\n) => PromiseLike<Value>\n\nexport type FunctionSet = Record<string, WithOptions<GroqFunction> | undefined>\n\nexport type NamespaceSet = Record<string, FunctionSet | undefined>\n\n// underscored to not collide with environments like jest that give variables named `global` special treatment\nconst _global: FunctionSet = {}\n\n// eslint-disable-next-line require-await\n_global.anywhere = async function anywhere() {\n  throw new Error('not implemented')\n}\n\n_global.anywhere.arity = 1\n\n_global.coalesce = async function coalesce(args, scope, execute) {\n  for (const arg of args) {\n    const value = await execute(arg, scope)\n    if (value.type !== 'null') {\n      return value\n    }\n  }\n  return NULL_VALUE\n}\n\n_global.count = async function count(args, scope, execute) {\n  const inner = await execute(args[0], scope)\n  if (!inner.isArray()) {\n    return NULL_VALUE\n  }\n\n  let num = 0\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for await (const _ of inner) {\n    num++\n  }\n  return fromNumber(num)\n}\n_global.count.arity = 1\n\n_global.dateTime = async function dateTime(args, scope, execute) {\n  const val = await execute(args[0], scope)\n  if (val.type === 'datetime') {\n    return val\n  }\n  if (val.type !== 'string') {\n    return NULL_VALUE\n  }\n  return DateTime.parseToValue(val.data)\n}\n_global.dateTime.arity = 1\n\n_global.defined = async function defined(args, scope, execute) {\n  const inner = await execute(args[0], scope)\n  return inner.type === 'null' ? FALSE_VALUE : TRUE_VALUE\n}\n_global.defined.arity = 1\n\n// eslint-disable-next-line require-await\n_global.identity = async function identity(args, scope) {\n  return fromString(scope.context.identity)\n}\n_global.identity.arity = 0\n\n_global.length = async function length(args, scope, execute) {\n  const inner = await execute(args[0], scope)\n\n  if (inner.type === 'string') {\n    return fromNumber(countUTF8(inner.data))\n  }\n\n  if (inner.isArray()) {\n    let num = 0\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for await (const _ of inner) {\n      num++\n    }\n    return fromNumber(num)\n  }\n\n  return NULL_VALUE\n}\n_global.length.arity = 1\n\n_global.path = async function path(args, scope, execute) {\n  const inner = await execute(args[0], scope)\n  if (inner.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  return fromPath(new Path(inner.data))\n}\n_global.path.arity = 1\n\n_global.string = async function string(args, scope, execute) {\n  const value = await execute(args[0], scope)\n  switch (value.type) {\n    case 'number':\n    case 'string':\n    case 'boolean':\n    case 'datetime':\n      return fromString(`${value.data}`)\n    default:\n      return NULL_VALUE\n  }\n}\n_global.string.arity = 1\n\n_global.references = async function references(args, scope, execute) {\n  const pathSet = new Set<string>()\n  for (const arg of args) {\n    const path = await execute(arg, scope)\n    if (path.type === 'string') {\n      pathSet.add(path.data)\n    } else if (path.isArray()) {\n      for await (const elem of path) {\n        if (elem.type === 'string') {\n          pathSet.add(elem.data)\n        }\n      }\n    }\n  }\n\n  if (pathSet.size === 0) {\n    return FALSE_VALUE\n  }\n\n  const scopeValue = await scope.value.get()\n  return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE\n}\n_global.references.arity = (c) => c >= 1\n\n_global.round = async function round(args, scope, execute) {\n  const value = await execute(args[0], scope)\n  if (value.type !== 'number') {\n    return NULL_VALUE\n  }\n\n  const num = value.data\n  let prec = 0\n\n  if (args.length === 2) {\n    const precValue = await execute(args[1], scope)\n    if (precValue.type !== 'number' || precValue.data < 0 || !Number.isInteger(precValue.data)) {\n      return NULL_VALUE\n    }\n    prec = precValue.data\n  }\n\n  if (prec === 0) {\n    if (num < 0) {\n      // JavaScript's round() function will always rounds towards positive infinity (-3.5 -> -3).\n      // The behavior we're interested in is to \"round half away from zero\".\n      return fromNumber(-Math.round(-num))\n    }\n    return fromNumber(Math.round(num))\n  }\n  return fromNumber(Number(num.toFixed(prec)))\n}\n_global.round.arity = (count) => count >= 1 && count <= 2\n\n// eslint-disable-next-line require-await\n_global.now = async function now(args, scope) {\n  return fromString(scope.context.timestamp.toISOString())\n}\n_global.now.arity = 0\n\n// eslint-disable-next-line require-await\n_global.boost = async function boost() {\n  // This should be handled by the scoring function.\n  throw new Error('unexpected boost call')\n}\n\n_global.boost.arity = 2\n\nconst string: FunctionSet = {}\n\nstring.lower = async function (args, scope, execute) {\n  const value = await execute(args[0], scope)\n\n  if (value.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  return fromString(value.data.toLowerCase())\n}\nstring.lower.arity = 1\n\nstring.upper = async function (args, scope, execute) {\n  const value = await execute(args[0], scope)\n\n  if (value.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  return fromString(value.data.toUpperCase())\n}\nstring.upper.arity = 1\n\nstring.split = async function (args, scope, execute) {\n  const str = await execute(args[0], scope)\n  if (str.type !== 'string') {\n    return NULL_VALUE\n  }\n  const sep = await execute(args[1], scope)\n  if (sep.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  if (str.data.length === 0) {\n    return fromJS([])\n  }\n  if (sep.data.length === 0) {\n    // This uses a Unicode codepoint splitting algorithm\n    return fromJS(Array.from(str.data))\n  }\n  return fromJS(str.data.split(sep.data))\n}\nstring.split.arity = 2\n\n_global.lower = string.lower\n_global.upper = string.upper\n\nstring.startsWith = async function (args, scope, execute) {\n  const str = await execute(args[0], scope)\n  if (str.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  const prefix = await execute(args[1], scope)\n  if (prefix.type !== 'string') {\n    return NULL_VALUE\n  }\n\n  return str.data.startsWith(prefix.data) ? TRUE_VALUE : FALSE_VALUE\n}\nstring.startsWith.arity = 2\n\nconst array: FunctionSet = {}\n\narray.join = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n  const sep = await execute(args[1], scope)\n  if (sep.type !== 'string') {\n    return NULL_VALUE\n  }\n  let buf = ''\n  let needSep = false\n  for await (const elem of arr) {\n    if (needSep) {\n      buf += sep.data\n    }\n    switch (elem.type) {\n      case 'number':\n      case 'string':\n      case 'boolean':\n      case 'datetime':\n        buf += `${elem.data}`\n        break\n      default:\n        return NULL_VALUE\n    }\n    needSep = true\n  }\n  return fromJS(buf)\n}\narray.join.arity = 2\n\narray.compact = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n\n  return new StreamValue(async function* () {\n    for await (const elem of arr) {\n      if (elem.type !== 'null') {\n        yield elem\n      }\n    }\n  })\n}\narray.compact.arity = 1\n\narray.unique = async function (args, scope, execute) {\n  const value = await execute(args[0], scope)\n  if (!value.isArray()) {\n    return NULL_VALUE\n  }\n\n  return new StreamValue(async function* () {\n    const added = new Set()\n    for await (const iter of value) {\n      switch (iter.type) {\n        case 'number':\n        case 'string':\n        case 'boolean':\n        case 'datetime':\n          if (!added.has(iter.data)) {\n            added.add(iter.data)\n            yield iter\n          }\n          break\n        default:\n          yield iter\n      }\n    }\n  })\n}\narray.unique.arity = 1\n\nconst pt: FunctionSet = {}\npt.text = async function (args, scope, execute) {\n  const value = await execute(args[0], scope)\n  const text = await portableTextContent(value)\n\n  if (text === null) {\n    return NULL_VALUE\n  }\n\n  return fromString(text)\n}\n\npt.text.arity = 1\n\nconst sanity: FunctionSet = {}\n// eslint-disable-next-line require-await\nsanity.projectId = async function (args, scope) {\n  if (scope.context.sanity) {\n    return fromString(scope.context.sanity.projectId)\n  }\n\n  return NULL_VALUE\n}\n// eslint-disable-next-line require-await\nsanity.dataset = async function (args, scope) {\n  if (scope.context.sanity) {\n    return fromString(scope.context.sanity.dataset)\n  }\n\n  return NULL_VALUE\n}\n\nexport type GroqPipeFunction = (\n  base: Value,\n  args: ExprNode[],\n  scope: Scope,\n  execute: Executor,\n) => PromiseLike<Value>\n\nexport const pipeFunctions: {[key: string]: WithOptions<GroqPipeFunction>} = {}\n\npipeFunctions.order = async function order(base, args, scope, execute) {\n  // eslint-disable-next-line max-len\n  // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59\n  await true\n\n  if (!base.isArray()) {\n    return NULL_VALUE\n  }\n\n  const mappers = []\n  const directions: string[] = []\n  let n = 0\n\n  for (let mapper of args) {\n    let direction = 'asc'\n\n    if (mapper.type === 'Desc') {\n      direction = 'desc'\n      mapper = mapper.base\n    } else if (mapper.type === 'Asc') {\n      mapper = mapper.base\n    }\n\n    mappers.push(mapper)\n    directions.push(direction)\n    n++\n  }\n\n  const aux = []\n  let idx = 0\n\n  for await (const value of base) {\n    const newScope = scope.createNested(value)\n    const tuple = [await value.get(), idx]\n    for (let i = 0; i < n; i++) {\n      const result = await execute(mappers[i], newScope)\n      tuple.push(await result.get())\n    }\n    aux.push(tuple)\n    idx++\n  }\n\n  aux.sort((aTuple, bTuple) => {\n    for (let i = 0; i < n; i++) {\n      let c = totalCompare(aTuple[i + 2], bTuple[i + 2])\n      if (directions[i] === 'desc') {\n        c = -c\n      }\n      if (c !== 0) {\n        return c\n      }\n    }\n    // Fallback to sorting on the original index for stable sorting.\n    return aTuple[1] - bTuple[1]\n  })\n\n  return fromJS(aux.map((v) => v[0]))\n}\npipeFunctions.order.arity = (count) => count >= 1\n\n// eslint-disable-next-line require-await\npipeFunctions.score = async function score(base, args, scope, execute) {\n  if (!base.isArray()) return NULL_VALUE\n\n  // Anything that isn't an object should be sorted first.\n  const unknown: Array<any> = []\n  const scored: Array<ObjectWithScore> = []\n\n  for await (const value of base) {\n    if (value.type !== 'object') {\n      unknown.push(await value.get())\n      continue\n    }\n\n    const newScope = scope.createNested(value)\n    let valueScore = typeof value.data._score === 'number' ? value.data._score : 0\n\n    for (const arg of args) {\n      valueScore += await evaluateScore(arg, newScope, execute)\n    }\n\n    const newObject = Object.assign({}, value.data, {_score: valueScore})\n    scored.push(newObject)\n  }\n\n  scored.sort((a, b) => b._score - a._score)\n  return fromJS(scored)\n}\n\npipeFunctions.score.arity = (count) => count >= 1\n\ntype ObjectWithScore = Record<string, unknown> & {_score: number}\n\nconst delta: FunctionSet = {}\n// eslint-disable-next-line require-await\ndelta.operation = async function (args, scope) {\n  const hasBefore = scope.context.before !== null\n  const hasAfter = scope.context.after !== null\n\n  if (hasBefore && hasAfter) {\n    return fromString('update')\n  }\n\n  if (hasAfter) {\n    return fromString('create')\n  }\n\n  if (hasBefore) {\n    return fromString('delete')\n  }\n\n  return NULL_VALUE\n}\n\ndelta.changedAny = () => {\n  throw new Error('not implemented')\n}\ndelta.changedAny.arity = 1\ndelta.changedAny.mode = 'delta'\n\ndelta.changedOnly = () => {\n  throw new Error('not implemented')\n}\ndelta.changedOnly.arity = 1\ndelta.changedOnly.mode = 'delta'\n\nconst diff: FunctionSet = {}\ndiff.changedAny = () => {\n  throw new Error('not implemented')\n}\ndiff.changedAny.arity = 3\n\ndiff.changedOnly = () => {\n  throw new Error('not implemented')\n}\ndiff.changedOnly.arity = 3\n\nconst math: FunctionSet = {}\nmath.min = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n\n  let n: number | undefined\n  for await (const elem of arr) {\n    if (elem.type === 'null') continue\n    if (elem.type !== 'number') {\n      return NULL_VALUE\n    }\n    if (n === undefined || elem.data < n) {\n      n = elem.data\n    }\n  }\n  return fromJS(n)\n}\nmath.min.arity = 1\n\nmath.max = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n\n  let n: number | undefined\n  for await (const elem of arr) {\n    if (elem.type === 'null') continue\n    if (elem.type !== 'number') {\n      return NULL_VALUE\n    }\n    if (n === undefined || elem.data > n) {\n      n = elem.data\n    }\n  }\n  return fromJS(n)\n}\nmath.max.arity = 1\n\nmath.sum = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n\n  let n = 0\n  for await (const elem of arr) {\n    if (elem.type === 'null') continue\n    if (elem.type !== 'number') {\n      return NULL_VALUE\n    }\n    n += elem.data\n  }\n  return fromJS(n)\n}\nmath.sum.arity = 1\n\nmath.avg = async function (args, scope, execute) {\n  const arr = await execute(args[0], scope)\n  if (!arr.isArray()) {\n    return NULL_VALUE\n  }\n\n  let n = 0\n  let c = 0\n  for await (const elem of arr) {\n    if (elem.type === 'null') continue\n    if (elem.type !== 'number') {\n      return NULL_VALUE\n    }\n    n += elem.data\n    c++\n  }\n  if (c === 0) {\n    return NULL_VALUE\n  }\n  return fromJS(n / c)\n}\nmath.avg.arity = 1\n\nconst dateTime: FunctionSet = {}\ndateTime.now = async function now(args, scope, execute) {\n  return fromDateTime(new DateTime(scope.context.timestamp))\n}\ndateTime.now.arity = 0\n\nexport const namespaces: NamespaceSet = {\n  global: _global,\n  string,\n  array,\n  pt,\n  delta,\n  diff,\n  sanity,\n  math,\n  dateTime,\n}\n","import {ParseOptions} from './types'\n\nexport type MarkName =\n  | 'add'\n  | 'and'\n  | 'arr_expr'\n  | 'array_end'\n  | 'array_splat'\n  | 'array'\n  | 'asc'\n  | 'attr_ident'\n  | 'comp'\n  | 'dblparent'\n  | 'deref_field'\n  | 'deref'\n  | 'desc'\n  | 'div'\n  | 'exc_range'\n  | 'filter'\n  | 'float'\n  | 'func_args_end'\n  | 'func_call'\n  | 'ident'\n  | 'inc_range'\n  | 'integer'\n  | 'mod'\n  | 'mul'\n  | 'neg'\n  | 'not'\n  | 'object_end'\n  | 'object_expr'\n  | 'object_pair'\n  | 'object_splat_this'\n  | 'object_splat'\n  | 'object'\n  | 'or'\n  | 'pair'\n  | 'param'\n  | 'paren'\n  | 'parent'\n  | 'pipecall'\n  | 'pos'\n  | 'pow'\n  | 'project'\n  | 'sci'\n  | 'star'\n  | 'str_begin'\n  | 'sub'\n  | 'this'\n\nexport interface Mark {\n  name: string\n  position: number\n}\n\nexport type MarkVisitor<T> = Record<string, MarkVisitorFunc<T>>\nexport type MarkVisitorFunc<T> = (p: MarkProcessor, mark: Mark) => T\n\nexport class MarkProcessor {\n  private string: string\n  private marks: Mark[]\n  private index: number\n  parseOptions: ParseOptions\n  allowBoost = false\n\n  constructor(string: string, marks: Mark[], parseOptions: ParseOptions) {\n    this.string = string\n    this.marks = marks\n    this.index = 0\n    this.parseOptions = parseOptions\n  }\n\n  hasMark(pos = 0): boolean {\n    return this.index + pos < this.marks.length\n  }\n\n  getMark(pos = 0): Mark {\n    return this.marks[this.index + pos]\n  }\n\n  shift(): void {\n    this.index += 1\n  }\n\n  process<T>(visitor: MarkVisitor<T>): T {\n    const mark = this.marks[this.index]\n    this.shift()\n    const func = visitor[mark.name]\n    if (!func) {\n      throw new Error(`Unknown handler: ${mark.name}`)\n    }\n    return func.call(visitor, this, mark)\n  }\n\n  processString(): string {\n    this.shift()\n    return this.processStringEnd()\n  }\n\n  processStringEnd(): string {\n    const prev = this.marks[this.index - 1]\n    const curr = this.marks[this.index]\n    this.shift()\n    return this.string.slice(prev.position, curr.position)\n  }\n\n  slice(len: number): string {\n    const pos = this.marks[this.index].position\n    return this.string.slice(pos, pos + len)\n  }\n}\n","'use strict'\n\nconst WS = /^([\\t\\n\\v\\f\\r \\u0085\\u00A0]|(\\/\\/[^\\n]*\\n))+/\nconst NUM = /^\\d+/\nconst IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/\n\n// Precedence levels for binary operators:\nconst PREC_PAIR = 1\nconst PREC_OR = 2\nconst PREC_AND = 3\nconst PREC_COMP = 4\nconst PREC_ORDER = 4\nconst PREC_ADD = 6\nconst PREC_SUB = 6\nconst PREC_MUL = 7\nconst PREC_DIV = 7\nconst PREC_MOD = 7\nconst PREC_POW = 8\n\n// Precedence levels for prefix operators:\nconst PREC_POS = 10\nconst PREC_NOT = 10\nconst PREC_NEG = 8\n\nfunction parse(str) {\n  let pos = 0\n  pos = skipWS(str, pos)\n  let result = parseExpr(str, pos, 0)\n  if (result.type === 'error') return result\n  pos = skipWS(str, result.position)\n  if (pos !== str.length) {\n    if (result.failPosition) {\n      pos = result.failPosition - 1\n    }\n    return {type: 'error', position: pos}\n  }\n  delete result.position\n  delete result.failPosition\n  return result\n}\n\nfunction parseExpr(str, pos, level) {\n  // In this function we parse precedence \"manually\" by having two variables:\n  //\n  // `level` is the minimum precedence level we want to parse at. If this is\n  // e.g. 7 then this function will not parse `3 + 4` (since addition is at 6),\n  // but instead just return `1` and leave ` + 5` remaining. We use this so that\n  // while handling the RHS of the multiplication in `1 + 2 * 3 + 4` we only parse `3`.\n  //\n  // `lhsLevel` is the precedence level of the currently parsed expression on\n  // the left-hand side. This is mainly used to handle non-associcativeness.\n\n  // This means that you'll see code like:\n  // - `if (level > PREC_XXX) break`: Operator is at this precedence level.\n  // - `if (lhsLevel < PREC_XXX) break`: Operator is left-associative.\n  // - `if (lhsLevel <= PREC_XXX) break`: Operator is right/non-associative.\n  // - `parseExpr(str, pos, PREC_XXX + 1)`: Operator is left/non-assoicate.\n  // - `parseExpr(str, pos, PREC_XXX)`: Operator is right-assoicate.\n\n  let startPos = pos\n  let token = str[pos]\n  let marks\n\n  switch (token) {\n    case '+': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS)\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'pos', position: startPos}].concat(rhs.marks)\n      pos = rhs.position\n      break\n    }\n    case '-': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG)\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'neg', position: startPos}].concat(rhs.marks)\n      pos = rhs.position\n      break\n    }\n    case '(': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 0)\n      if (rhs.type === 'error') return rhs\n      pos = skipWS(str, rhs.position)\n      switch (str[pos]) {\n        case ',': {\n          // Tuples\n          marks = [{name: 'tuple', position: startPos}].concat(rhs.marks)\n          pos = skipWS(str, pos + 1)\n          while (true) {\n            rhs = parseExpr(str, pos, 0)\n            if (rhs.type === 'error') return rhs\n            pos = skipWS(str, rhs.position)\n            if (str[pos] !== ',') break\n            pos = skipWS(str, pos + 1)\n          }\n          if (str[pos] !== ')') return {type: 'error', position: pos}\n          pos++\n          marks.push({name: 'tuple_end', position: pos})\n          break\n        }\n        case ')': {\n          pos++\n          marks = [{name: 'group', position: startPos}].concat(rhs.marks)\n          break\n        }\n        default:\n          return {type: 'error', position: pos}\n      }\n      break\n    }\n    case '!': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT)\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'not', position: startPos}].concat(rhs.marks)\n      pos = rhs.position\n      break\n    }\n    case '{': {\n      let result = parseObject(str, pos)\n      if (result.type === 'error') return result\n      marks = result.marks\n      pos = result.position\n      break\n    }\n    case '[':\n      marks = [{name: 'array', position: pos}]\n      pos = skipWS(str, pos + 1)\n\n      if (str[pos] !== ']') {\n        while (true) {\n          if (str.slice(pos, pos + 3) === '...') {\n            marks.push({name: 'array_splat', position: pos})\n            pos = skipWS(str, pos + 3)\n          }\n\n          let res = parseExpr(str, pos, 0)\n          if (res.type === 'error') return res\n          marks = marks.concat(res.marks)\n          pos = res.position\n          pos = skipWS(str, pos)\n          if (str[pos] !== ',') break\n          pos = skipWS(str, pos + 1)\n          if (str[pos] === ']') break\n        }\n      }\n\n      if (str[pos] === ']') {\n        pos++\n        marks.push({name: 'array_end', position: pos})\n      } else {\n        return {type: 'error', position: pos}\n      }\n\n      break\n    case \"'\":\n    case '\"': {\n      let result = parseString(str, pos)\n      if (result.type === 'error') return result\n      marks = result.marks\n      pos = result.position\n      break\n    }\n    case '^': {\n      pos++\n      marks = []\n      while (str[pos] === '.' && str[pos + 1] === '^') {\n        marks.push({name: 'dblparent', position: startPos})\n        pos += 2\n      }\n      marks.push({name: 'parent', position: startPos})\n      break\n    }\n    case '@':\n      marks = [{name: 'this', position: startPos}]\n      pos++\n      break\n    case '*':\n      marks = [{name: 'everything', position: startPos}]\n      pos++\n      break\n    case '$': {\n      let identLen = parseRegex(str, pos + 1, IDENT)\n      if (identLen) {\n        pos += 1 + identLen\n        marks = [\n          {name: 'param', position: startPos},\n          {name: 'ident', position: startPos + 1},\n          {name: 'ident_end', position: pos},\n        ]\n      }\n      break\n    }\n    default: {\n      let numLen = parseRegex(str, pos, NUM)\n      if (numLen) {\n        pos += numLen\n        let name = 'integer'\n\n        if (str[pos] === '.') {\n          let fracLen = parseRegex(str, pos + 1, NUM)\n          if (fracLen) {\n            name = 'float'\n            pos += 1 + fracLen\n          }\n        }\n\n        if (str[pos] === 'e' || str[pos] === 'E') {\n          name = 'sci'\n          pos++\n          if (str[pos] === '+' || str[pos] === '-') {\n            pos++\n          }\n          let expLen = parseRegex(str, pos, NUM)\n          if (!expLen) return {type: 'error', position: pos}\n          pos += expLen\n        }\n\n        marks = [\n          {name, position: startPos},\n          {name: name + '_end', position: pos},\n        ]\n\n        break\n      }\n\n      let identLen = parseRegex(str, pos, IDENT)\n      if (identLen) {\n        pos += identLen\n        switch (str[pos]) {\n          case ':':\n          case '(': {\n            let result = parseFuncCall(str, startPos, pos)\n            if (result.type === 'error') return result\n            marks = result.marks\n            pos = result.position\n            break\n          }\n          default: {\n            marks = [\n              {name: 'this_attr', position: startPos},\n              {name: 'ident', position: startPos},\n              {name: 'ident_end', position: pos},\n            ]\n          }\n        }\n\n        break\n      }\n    }\n  }\n\n  if (!marks) {\n    return {type: 'error', position: pos}\n  }\n\n  let lhsLevel = 12\n  let trav\n\n  loop: while (true) {\n    let innerPos = skipWS(str, pos)\n    if (innerPos === str.length) {\n      pos = innerPos\n      break\n    }\n\n    trav = parseTraversal(str, innerPos)\n    if (trav.type === 'success') {\n      marks.unshift({name: 'traverse', position: startPos})\n      while (trav.type === 'success') {\n        marks = marks.concat(trav.marks)\n        pos = trav.position\n        trav = parseTraversal(str, skipWS(str, pos))\n      }\n      marks.push({name: 'traversal_end', position: pos})\n      continue\n    }\n\n    let token = str[innerPos]\n    switch (token) {\n      case '=': {\n        let nextToken = str[innerPos + 1]\n        switch (nextToken) {\n          case '>': {\n            // =>\n            if (level > PREC_PAIR || lhsLevel <= PREC_PAIR) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR)\n            if (rhs.type === 'error') return rhs\n            marks = marks.concat(rhs.marks)\n            marks.unshift({name: 'pair', position: startPos})\n            pos = rhs.position\n            lhsLevel = PREC_PAIR\n            break\n          }\n          case '=': {\n            // ==\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1)\n            if (rhs.type === 'error') return rhs\n            marks.unshift({name: 'comp', position: startPos})\n            marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2})\n            marks = marks.concat(rhs.marks)\n            pos = rhs.position\n            lhsLevel = PREC_COMP\n            break\n          }\n          default:\n            break loop\n        }\n        break\n      }\n      case '+': {\n        if (level > PREC_ADD || lhsLevel < PREC_ADD) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'add', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_ADD\n        break\n      }\n      case '-': {\n        if (level > PREC_SUB || lhsLevel < PREC_SUB) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'sub', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_SUB\n        break\n      }\n      case '*': {\n        if (str[innerPos + 1] === '*') {\n          // **\n          if (level > PREC_POW || lhsLevel <= PREC_POW) break loop\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW)\n          if (rhs.type === 'error') return rhs\n          marks = marks.concat(rhs.marks)\n          marks.unshift({name: 'pow', position: startPos})\n          pos = rhs.position\n          lhsLevel = PREC_POW\n          break\n        }\n\n        // *\n        if (level > PREC_MUL || lhsLevel < PREC_MUL) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'mul', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_MUL\n        break\n      }\n      case '/': {\n        if (level > PREC_DIV || lhsLevel < PREC_DIV) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'div', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_DIV\n        break\n      }\n      case '%': {\n        if (level > PREC_MOD || lhsLevel < PREC_MOD) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'mod', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_MOD\n        break\n      }\n      case '<':\n      case '>': {\n        if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n        let nextPos = innerPos + 1\n        if (str[nextPos] === '=') {\n          nextPos++\n        }\n        let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1)\n        if (rhs.type === 'error') return rhs\n        marks.unshift({name: 'comp', position: startPos})\n        marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: nextPos})\n        marks = marks.concat(rhs.marks)\n        pos = rhs.position\n        lhsLevel = PREC_COMP\n        break\n      }\n      case '|': {\n        if (str[innerPos + 1] === '|') {\n          // ||\n          if (level > PREC_OR || lhsLevel < PREC_OR) break loop\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1)\n          if (rhs.type === 'error') return rhs\n          marks = marks.concat(rhs.marks)\n          marks.unshift({name: 'or', position: startPos})\n          pos = rhs.position\n          lhsLevel = PREC_OR\n        } else {\n          if (level > 11 || lhsLevel < 11) break loop\n          // pipe call\n          let identPos = skipWS(str, innerPos + 1)\n          let identLen = parseRegex(str, identPos, IDENT)\n          if (!identLen) return {type: 'error', position: identPos}\n          pos = identPos + identLen\n          if (str[pos] === '(' || str[pos] === ':') {\n            let result = parseFuncCall(str, identPos, pos)\n            if (result.type === 'error') return result\n            marks = marks.concat(result.marks)\n            marks.unshift({name: 'pipecall', position: startPos})\n            pos = result.position\n            lhsLevel = 11\n          }\n        }\n        break\n      }\n      case '&': {\n        // &&\n        if (str[innerPos + 1] != '&') break loop\n        if (level > PREC_AND || lhsLevel < PREC_AND) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1)\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks)\n        marks.unshift({name: 'and', position: startPos})\n        pos = rhs.position\n        lhsLevel = PREC_AND\n        break\n      }\n      case '!': {\n        // !=\n        if (str[innerPos + 1] !== '=') break loop\n        if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1)\n        if (rhs.type === 'error') return rhs\n        marks.unshift({name: 'comp', position: startPos})\n        marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2})\n        marks = marks.concat(rhs.marks)\n        pos = rhs.position\n        lhsLevel = PREC_COMP\n        break\n      }\n      case 'd': {\n        // asc\n        if (str.slice(innerPos, innerPos + 4) !== 'desc') break loop\n        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop\n        marks.unshift({name: 'desc', position: startPos})\n        pos = innerPos + 4\n        lhsLevel = PREC_ORDER\n        break\n      }\n      case 'a': {\n        // asc\n        if (str.slice(innerPos, innerPos + 3) !== 'asc') break loop\n        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop\n        marks.unshift({name: 'asc', position: startPos})\n        pos = innerPos + 3\n        lhsLevel = PREC_ORDER\n        break\n      }\n      default: {\n        let ident = parseRegexStr(str, innerPos, IDENT)\n        switch (ident) {\n          case 'in': {\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n\n            pos = skipWS(str, innerPos + 2)\n\n            let isGroup = false\n\n            if (str[pos] === '(') {\n              isGroup = true\n              pos = skipWS(str, pos + 1)\n            }\n\n            let rangePos = pos\n            let result = parseExpr(str, pos, PREC_COMP + 1)\n            if (result.type === 'error') return result\n\n            pos = skipWS(str, result.position)\n\n            if (str[pos] === '.' && str[pos + 1] === '.') {\n              // LHS in RANGE\n              let type = 'inc_range'\n              if (str[pos + 2] === '.') {\n                type = 'exc_range'\n                pos = skipWS(str, pos + 3)\n              } else {\n                pos = skipWS(str, pos + 2)\n              }\n\n              let rhs = parseExpr(str, pos, PREC_COMP + 1)\n              if (rhs.type === 'error') return rhs\n              marks.unshift({name: 'in_range', position: startPos})\n              marks = marks.concat({name: type, position: rangePos}, result.marks, rhs.marks)\n              pos = rhs.position\n            } else {\n              // LHS in RHS\n              marks.unshift({name: 'comp', position: startPos})\n              marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2})\n              marks = marks.concat(result.marks)\n            }\n\n            if (isGroup) {\n              pos = skipWS(str, pos)\n              if (str[pos] !== ')') return {type: 'error', position: pos}\n              pos++\n            }\n\n            lhsLevel = PREC_COMP\n            break\n          }\n          case 'match': {\n            // match operator\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1)\n            if (rhs.type === 'error') return rhs\n            marks.unshift({name: 'comp', position: startPos})\n            marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 5})\n            marks = marks.concat(rhs.marks)\n            pos = rhs.position\n            lhsLevel = 4\n            break\n          }\n          default: {\n            break loop\n          }\n        }\n      }\n    }\n  }\n\n  let failPosition = trav?.type === 'error' && trav.position\n\n  return {type: 'success', marks, position: pos, failPosition}\n}\n\nfunction parseTraversal(str, pos) {\n  let startPos = pos\n  switch (str[pos]) {\n    case '.': {\n      pos = skipWS(str, pos + 1)\n      let identStart = pos\n      let identLen = parseRegex(str, pos, IDENT)\n      if (!identLen) return {type: 'error', position: pos}\n      pos += identLen\n\n      return {\n        type: 'success',\n        marks: [\n          {name: 'attr_access', position: startPos},\n          {name: 'ident', position: identStart},\n          {name: 'ident_end', position: pos},\n        ],\n        position: pos,\n      }\n    }\n    case '-':\n      if (str[pos + 1] !== '>') return {type: 'error', position: pos}\n      // ->\n\n      let marks = [{name: 'deref', position: startPos}]\n      pos += 2\n\n      let identPos = skipWS(str, pos)\n      let identLen = parseRegex(str, identPos, IDENT)\n      if (identLen) {\n        pos = identPos + identLen\n        marks.push(\n          {name: 'deref_attr', position: identPos},\n          {name: 'ident', position: identPos},\n          {name: 'ident_end', position: pos},\n        )\n      }\n\n      return {\n        type: 'success',\n        marks,\n        position: pos,\n      }\n    case '[': {\n      pos = skipWS(str, pos + 1)\n\n      if (str[pos] === ']') {\n        return {\n          type: 'success',\n          marks: [{name: 'array_postfix', position: startPos}],\n          position: pos + 1,\n        }\n      }\n\n      let rangePos = pos\n      let result = parseExpr(str, pos, 0)\n      if (result.type === 'error') return result\n\n      pos = skipWS(str, result.position)\n\n      if (str[pos] === '.' && str[pos + 1] === '.') {\n        let type = 'inc_range'\n        if (str[pos + 2] === '.') {\n          type = 'exc_range'\n          pos += 3\n        } else {\n          pos += 2\n        }\n\n        pos = skipWS(str, pos)\n        let rhs = parseExpr(str, pos, 0)\n        if (rhs.type === 'error') return rhs\n        pos = skipWS(str, rhs.position)\n        if (str[pos] !== ']') return {type: 'error', position: pos}\n\n        return {\n          type: 'success',\n          marks: [\n            {name: 'slice', position: startPos},\n            {name: type, position: rangePos},\n          ].concat(result.marks, rhs.marks),\n          position: pos + 1,\n        }\n      }\n\n      if (str[pos] !== ']') return {type: 'error', position: pos}\n\n      return {\n        type: 'success',\n        marks: [{name: 'square_bracket', position: startPos}].concat(result.marks),\n        position: pos + 1,\n      }\n    }\n    case '|': {\n      pos = skipWS(str, pos + 1)\n      if (str[pos] === '{') {\n        let result = parseObject(str, pos)\n        if (result.type === 'error') return result\n        result.marks.unshift({name: 'projection', position: startPos})\n        return result\n      }\n      break\n    }\n    case '{': {\n      let result = parseObject(str, pos)\n      if (result.type === 'error') return result\n      result.marks.unshift({name: 'projection', position: startPos})\n      return result\n    }\n  }\n\n  return {type: 'error', position: pos}\n}\n\nfunction parseFuncCall(str, startPos, pos) {\n  let marks = []\n\n  marks.push({name: 'func_call', position: startPos})\n\n  if (str[pos] === ':' && str[pos + 1] === ':') {\n    marks.push({name: 'namespace', position: startPos})\n    marks.push({name: 'ident', position: startPos}, {name: 'ident_end', position: pos})\n    pos = skipWS(str, pos + 2)\n    let nameLen = parseRegex(str, pos, IDENT)\n    if (!nameLen) return {type: 'error', position: pos}\n    marks.push({name: 'ident', position: pos}, {name: 'ident_end', position: pos + nameLen})\n    pos = skipWS(str, pos + nameLen)\n    if (str[pos] !== '(') return {type: 'error', position: pos}\n    pos++\n    // Consume any whitespace in front of the function argument.\n    pos = skipWS(str, pos)\n  } else {\n    marks.push({name: 'ident', position: startPos}, {name: 'ident_end', position: pos})\n    pos = skipWS(str, pos + 1)\n  }\n\n  let lastPos = pos\n\n  if (str[pos] !== ')') {\n    while (true) {\n      let result = parseExpr(str, pos, 0)\n      if (result.type === 'error') return result\n      marks = marks.concat(result.marks)\n      lastPos = result.position\n      pos = skipWS(str, result.position)\n      if (str[pos] !== ',') break\n      pos = skipWS(str, pos + 1)\n      // Also allow trailing commas\n      if (str[pos] === ')') break\n    }\n  }\n\n  if (str[pos] !== ')') {\n    return {type: 'error', position: pos}\n  }\n\n  // NOTE: a bit arbitrary the func_args_end points comes before the whitespace.\n  marks.push({name: 'func_args_end', position: lastPos})\n\n  return {\n    type: 'success',\n    marks,\n    position: pos + 1,\n  }\n}\n\nfunction parseObject(str, pos) {\n  let marks = [{name: 'object', position: pos}]\n  pos = skipWS(str, pos + 1)\n\n  loop: while (str[pos] !== '}') {\n    let pairPos = pos\n\n    if (str.slice(pos, pos + 3) === '...') {\n      pos = skipWS(str, pos + 3)\n      if (str[pos] !== '}' && str[pos] !== ',') {\n        let expr = parseExpr(str, pos, 0)\n        if (expr.type === 'error') return expr\n        marks.push({name: 'object_splat', position: pairPos})\n        marks = marks.concat(expr.marks)\n        pos = expr.position\n      } else {\n        marks.push({name: 'object_splat_this', position: pairPos})\n      }\n    } else {\n      let expr = parseExpr(str, pos, 0)\n      if (expr.type === 'error') return expr\n      let nextPos = skipWS(str, expr.position)\n      if (expr.marks[0].name === 'str' && str[nextPos] === ':') {\n        let value = parseExpr(str, skipWS(str, nextPos + 1), 0)\n        if (value.type === 'error') return value\n        marks.push({name: 'object_pair', position: pairPos})\n        marks = marks.concat(expr.marks, value.marks)\n        pos = value.position\n      } else {\n        marks = marks.concat({name: 'object_expr', position: pos}, expr.marks)\n        pos = expr.position\n      }\n    }\n    pos = skipWS(str, pos)\n    if (str[pos] !== ',') break\n    pos = skipWS(str, pos + 1)\n  }\n\n  if (str[pos] !== '}') {\n    return {type: 'error', position: pos}\n  }\n\n  pos++\n  marks.push({name: 'object_end', position: pos})\n  return {type: 'success', marks, position: pos}\n}\n\nfunction parseString(str, pos) {\n  let token = str[pos]\n  pos = pos + 1\n  const marks = [{name: 'str', position: pos}]\n  str: for (; ; pos++) {\n    if (pos > str.length) return {type: 'error', position: pos}\n\n    switch (str[pos]) {\n      case token: {\n        marks.push({name: 'str_end', position: pos})\n        pos++\n        break str\n      }\n      case '\\\\': {\n        marks.push({name: 'str_pause', position: pos})\n        if (str[pos + 1] === 'u') {\n          if (str[pos + 2] === '{') {\n            marks.push({name: 'unicode_hex', position: pos + 3})\n            pos = str.indexOf('}', pos + 3)\n            marks.push({name: 'unicode_hex_end', position: pos})\n          } else {\n            marks.push({name: 'unicode_hex', position: pos + 2})\n            marks.push({name: 'unicode_hex_end', position: pos + 6})\n            pos += 5\n          }\n        } else {\n          marks.push({name: 'single_escape', position: pos + 1})\n          pos += 1\n        }\n        marks.push({name: 'str_start', position: pos + 1})\n      }\n    }\n  }\n\n  return {type: 'success', marks, position: pos}\n}\n\nfunction skipWS(str, pos) {\n  return pos + parseRegex(str, pos, WS)\n}\n\n/**\n * Parses a regex at a position and returns the number of characters that was matched.\n */\nfunction parseRegex(str, pos, re) {\n  let m = re.exec(str.slice(pos))\n  return m ? m[0].length : 0\n}\n\n/**\n * Parses a regex at a position and returns matched string.\n */\nfunction parseRegexStr(str, pos, re) {\n  let m = re.exec(str.slice(pos))\n  return m ? m[0] : null\n}\n\nexport {parse}\n","/* eslint-disable camelcase */\nimport {ExprNode} from './nodeTypes'\n\nexport type Traversal = (base: ExprNode) => ExprNode\n\n/**\n * Join combines two traversals, returning a mapper which is the result of first\n * applying `a` and then applying `b`.\n */\nfunction join(a: Traversal, b: Traversal): Traversal {\n  return (base: ExprNode) => b(a(base))\n}\n\n/**\n * Map returns a new mapper which will the inner mappe to each element of the array.\n */\nfunction map(inner: Traversal): Traversal {\n  return (base: ExprNode) => ({type: 'Map', base, expr: inner({type: 'This'})})\n}\n\nfunction flatMap(inner: Traversal): Traversal {\n  return (base: ExprNode) => ({type: 'FlatMap', base, expr: inner({type: 'This'})})\n}\n\nexport type TraversalResult = {\n  type: 'a-a' | 'a-b' | 'b-a' | 'b-b'\n  build: Traversal\n}\n\nexport function traverseArray(build: Traversal, right: TraversalResult | null): TraversalResult {\n  if (!right) {\n    return {\n      type: 'a-a',\n      build: build,\n    }\n  }\n\n  switch (right.type) {\n    case 'a-a':\n      return {\n        type: 'a-a',\n        build: join(build, right.build),\n      }\n\n    case 'a-b':\n      return {\n        type: 'a-b',\n        build: join(build, right.build),\n      }\n\n    case 'b-b':\n      return {\n        type: 'a-a',\n        build: join(build, map(right.build)),\n      }\n\n    case 'b-a':\n      return {\n        type: 'a-a',\n        build: join(build, flatMap(right.build)),\n      }\n\n    default:\n      throw new Error(`unknown type: ${right.type}`)\n  }\n}\n\nexport function traversePlain(mapper: Traversal, right: TraversalResult | null): TraversalResult {\n  if (!right) {\n    return {\n      type: 'b-b',\n      build: mapper,\n    }\n  }\n\n  switch (right.type) {\n    case 'a-a':\n    case 'b-a':\n      return {\n        type: 'b-a',\n        build: join(mapper, right.build),\n      }\n\n    case 'a-b':\n    case 'b-b':\n      return {\n        type: 'b-b',\n        build: join(mapper, right.build),\n      }\n\n    default:\n      throw new Error(`unknown type: ${right.type}`)\n  }\n}\n\nexport function traverseElement(mapper: Traversal, right: TraversalResult | null): TraversalResult {\n  if (!right) {\n    return {\n      type: 'a-b',\n      build: mapper,\n    }\n  }\n\n  switch (right.type) {\n    case 'a-a':\n    case 'b-a':\n      return {\n        type: 'a-a',\n        build: join(mapper, right.build),\n      }\n\n    case 'a-b':\n    case 'b-b':\n      return {\n        type: 'a-b',\n        build: join(mapper, right.build),\n      }\n\n    default:\n      throw new Error(`unknown type: ${right.type}`)\n  }\n}\n\nexport function traverseProjection(\n  mapper: Traversal,\n  right: TraversalResult | null,\n): TraversalResult {\n  if (!right) {\n    return {\n      type: 'b-b',\n      build: mapper,\n    }\n  }\n\n  switch (right.type) {\n    case 'a-a':\n      return {\n        type: 'a-a',\n        build: join(map(mapper), right.build),\n      }\n    case 'a-b':\n      return {\n        type: 'a-b',\n        build: join(map(mapper), right.build),\n      }\n    case 'b-a':\n      return {\n        type: 'b-a',\n        build: join(mapper, right.build),\n      }\n    case 'b-b':\n      return {\n        type: 'b-b',\n        build: join(mapper, right.build),\n      }\n    default:\n      throw new Error(`unknown type: ${right.type}`)\n  }\n}\n","/* eslint-disable camelcase */\nimport {tryConstantEvaluate} from './evaluator'\nimport {GroqFunctionArity, namespaces, pipeFunctions} from './evaluator/functions'\nimport {Mark, MarkProcessor, MarkVisitor} from './markProcessor'\nimport {\n  ArrayElementNode,\n  ExprNode,\n  FuncCallNode,\n  ObjectAttributeNode,\n  ObjectSplatNode,\n  OpCall,\n  ParentNode,\n  SelectNode,\n} from './nodeTypes'\nimport {parse as rawParse} from './rawParser'\nimport {\n  TraversalResult,\n  traverseArray,\n  traverseElement,\n  traversePlain,\n  traverseProjection,\n} from './traversal'\nimport {ParseOptions} from './types'\n\ntype EscapeSequences = \"'\" | '\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't'\n\nconst ESCAPE_SEQUENCE: {[key in EscapeSequences]: string} = {\n  \"'\": \"'\",\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t',\n}\n\nfunction expandHex(str: string): string {\n  const charCode = parseInt(str, 16)\n  return String.fromCharCode(charCode)\n}\n\nclass GroqQueryError extends Error {\n  public name = 'GroqQueryError'\n}\n\nconst EXPR_BUILDER: MarkVisitor<ExprNode> = {\n  group(p) {\n    const inner = p.process(EXPR_BUILDER)\n    return {\n      type: 'Group',\n      base: inner,\n    }\n  },\n\n  everything() {\n    return {type: 'Everything'}\n  },\n\n  this() {\n    return {type: 'This'}\n  },\n\n  parent() {\n    return {\n      type: 'Parent',\n      n: 1,\n    }\n  },\n\n  dblparent(p) {\n    const next = p.process(EXPR_BUILDER) as ParentNode\n    return {\n      type: 'Parent',\n      n: next.n + 1,\n    }\n  },\n\n  traverse(p) {\n    const base = p.process(EXPR_BUILDER)\n    const traversalList: Array<(right: TraversalResult | null) => TraversalResult> = []\n    while (p.getMark().name !== 'traversal_end') {\n      traversalList.push(p.process(TRAVERSE_BUILDER))\n    }\n    p.shift()\n    let traversal: TraversalResult | null = null\n    for (let i = traversalList.length - 1; i >= 0; i--) {\n      traversal = traversalList[i](traversal)\n    }\n    if (base.type === 'Everything' || base.type === 'Array' || base.type === 'PipeFuncCall') {\n      traversal = traverseArray((val) => val, traversal)\n    }\n    if (traversal === null) throw new Error('BUG: unexpected empty traversal')\n    return traversal.build(base)\n  },\n\n  this_attr(p) {\n    const name = p.processString()\n\n    if (name === 'null') {\n      return {type: 'Value', value: null}\n    }\n    if (name === 'true') {\n      return {type: 'Value', value: true}\n    }\n    if (name === 'false') {\n      return {type: 'Value', value: false}\n    }\n\n    return {\n      type: 'AccessAttribute',\n      name,\n    }\n  },\n\n  neg(p) {\n    const base = p.process(EXPR_BUILDER)\n\n    return {\n      type: 'Neg',\n      base,\n    }\n  },\n\n  pos(p) {\n    const base = p.process(EXPR_BUILDER)\n\n    return {\n      type: 'Pos',\n      base,\n    }\n  },\n\n  add(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '+',\n      left,\n      right,\n    }\n  },\n\n  sub(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '-',\n      left,\n      right,\n    }\n  },\n\n  mul(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '*',\n      left,\n      right,\n    }\n  },\n\n  div(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '/',\n      left,\n      right,\n    }\n  },\n\n  mod(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '%',\n      left,\n      right,\n    }\n  },\n\n  pow(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: '**',\n      left,\n      right,\n    }\n  },\n\n  comp(p) {\n    const left = p.process(EXPR_BUILDER)\n    const op = p.processString() as OpCall\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'OpCall',\n      op: op,\n      left: left,\n      right: right,\n    }\n  },\n\n  in_range(p) {\n    const base = p.process(EXPR_BUILDER)\n    const isInclusive = p.getMark().name === 'inc_range'\n    p.shift()\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'InRange',\n      base,\n      left,\n      right,\n      isInclusive,\n    }\n  },\n\n  str(p) {\n    let value = ''\n    // eslint-disable-next-line no-labels\n    loop: while (p.hasMark()) {\n      const mark = p.getMark()\n      switch (mark.name) {\n        case 'str_end':\n          value += p.processStringEnd()\n          // eslint-disable-next-line no-labels\n          break loop\n        case 'str_pause':\n          value += p.processStringEnd()\n          break\n        case 'str_start':\n          p.shift()\n          break\n        case 'single_escape': {\n          const char = p.slice(1)\n          p.shift()\n          value += ESCAPE_SEQUENCE[char as EscapeSequences]\n          break\n        }\n        case 'unicode_hex':\n          p.shift()\n          value += expandHex(p.processStringEnd())\n          break\n        default:\n          throw new Error(`unexpected mark: ${mark.name}`)\n      }\n    }\n    return {type: 'Value', value}\n  },\n\n  integer(p) {\n    const strValue = p.processStringEnd()\n    return {\n      type: 'Value',\n      value: Number(strValue),\n    }\n  },\n\n  float(p) {\n    const strValue = p.processStringEnd()\n    return {\n      type: 'Value',\n      value: Number(strValue),\n    }\n  },\n\n  sci(p) {\n    const strValue = p.processStringEnd()\n    return {\n      type: 'Value',\n      value: Number(strValue),\n    }\n  },\n\n  object(p) {\n    const attributes: ObjectAttributeNode[] = []\n    while (p.getMark().name !== 'object_end') {\n      attributes.push(p.process(OBJECT_BUILDER))\n    }\n    p.shift()\n\n    return {\n      type: 'Object',\n      attributes,\n    }\n  },\n\n  array(p) {\n    const elements: ArrayElementNode[] = []\n    while (p.getMark().name !== 'array_end') {\n      let isSplat = false\n      if (p.getMark().name === 'array_splat') {\n        isSplat = true\n        p.shift()\n      }\n      const value = p.process(EXPR_BUILDER)\n      elements.push({\n        type: 'ArrayElement',\n        value,\n        isSplat,\n      })\n    }\n    p.shift()\n    return {\n      type: 'Array',\n      elements: elements,\n    }\n  },\n\n  tuple(p) {\n    const members: ExprNode[] = []\n    while (p.getMark().name !== 'tuple_end') {\n      members.push(p.process(EXPR_BUILDER))\n    }\n    p.shift()\n    return {\n      type: 'Tuple',\n      members,\n    }\n  },\n\n  func_call(p) {\n    let namespace = 'global'\n    if (p.getMark().name === 'namespace') {\n      p.shift()\n      namespace = p.processString()\n    }\n\n    const name = p.processString()\n    if (namespace === 'global' && name === 'select') {\n      const result: SelectNode = {\n        type: 'Select',\n        alternatives: [],\n      }\n\n      while (p.getMark().name !== 'func_args_end') {\n        if (p.getMark().name === 'pair') {\n          if (result.fallback) throw new GroqQueryError(`unexpected argument to select()`)\n          p.shift()\n          const condition = p.process(EXPR_BUILDER)\n          const value = p.process(EXPR_BUILDER)\n          result.alternatives.push({\n            type: 'SelectAlternative',\n            condition,\n            value,\n          })\n        } else {\n          if (result.fallback) throw new GroqQueryError(`unexpected argument to select()`)\n          const value = p.process(EXPR_BUILDER)\n          result.fallback = value\n        }\n      }\n      p.shift()\n      return result\n    }\n\n    const args: ExprNode[] = []\n\n    while (p.getMark().name !== 'func_args_end') {\n      if (argumentShouldBeSelector(namespace, name, args.length)) {\n        // Since the diff/delta functions aren't validated yet we only want to validate the selector\n        // being used. We expect the null valued arg to throw an error at evaluation time.\n        p.process(SELECTOR_BUILDER)\n        args.push({type: 'Selector'})\n      } else {\n        args.push(p.process(EXPR_BUILDER))\n      }\n    }\n\n    p.shift()\n\n    if (namespace === 'global' && (name === 'before' || name === 'after')) {\n      if (p.parseOptions.mode === 'delta') {\n        return {\n          type: 'Context',\n          key: name,\n        }\n      }\n    }\n\n    if (namespace === 'global' && name === 'boost' && !p.allowBoost)\n      throw new GroqQueryError('unexpected boost')\n\n    const funcs = namespaces[namespace]\n    if (!funcs) {\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`)\n    }\n\n    const func = funcs[name]\n    if (!func) {\n      throw new GroqQueryError(`Undefined function: ${name}`)\n    }\n    if (func.arity !== undefined) {\n      validateArity(name, func.arity, args.length)\n    }\n\n    if (func.mode !== undefined && func.mode !== p.parseOptions.mode) {\n      throw new GroqQueryError(`Undefined function: ${name}`)\n    }\n\n    return {\n      type: 'FuncCall',\n      func,\n      namespace,\n      name,\n      args,\n    }\n  },\n\n  pipecall(p) {\n    const base = p.process(EXPR_BUILDER)\n    p.shift() // Remove the func_call\n\n    let namespace = 'global'\n    if (p.getMark().name === 'namespace') {\n      p.shift()\n      namespace = p.processString()\n    }\n    if (namespace !== 'global') {\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`)\n    }\n\n    const name = p.processString()\n    const args: ExprNode[] = []\n\n    const oldAllowBoost = p.allowBoost\n    if (name === 'score') {\n      // Only allow boost inside a score expression\n      p.allowBoost = true\n    }\n\n    for (;;) {\n      const markName = p.getMark().name\n      if (markName === 'func_args_end') {\n        break\n      }\n\n      if (name === 'order') {\n        if (markName === 'asc') {\n          p.shift()\n          args.push({type: 'Asc', base: p.process(EXPR_BUILDER)})\n          continue\n        } else if (markName === 'desc') {\n          p.shift()\n          args.push({type: 'Desc', base: p.process(EXPR_BUILDER)})\n          continue\n        }\n      }\n\n      args.push(p.process(EXPR_BUILDER))\n    }\n    p.shift()\n\n    p.allowBoost = oldAllowBoost\n\n    const func = pipeFunctions[name]\n    if (!func) {\n      throw new GroqQueryError(`Undefined pipe function: ${name}`)\n    }\n    if (func.arity) {\n      validateArity(name, func.arity, args.length)\n    }\n\n    return {\n      type: 'PipeFuncCall',\n      func,\n      base,\n      name,\n      args,\n    }\n  },\n\n  pair(p) {\n    throw new GroqQueryError(`unexpected =>`)\n  },\n\n  and(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'And',\n      left,\n      right,\n    }\n  },\n\n  or(p) {\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n    return {\n      type: 'Or',\n      left,\n      right,\n    }\n  },\n\n  not(p) {\n    const base = p.process(EXPR_BUILDER)\n    return {\n      type: 'Not',\n      base,\n    }\n  },\n\n  asc(p) {\n    throw new GroqQueryError('unexpected asc')\n  },\n\n  desc(p) {\n    throw new GroqQueryError('unexpected desc')\n  },\n\n  param(p) {\n    const name = p.processString()\n\n    if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {\n      return {\n        type: 'Value',\n        value: p.parseOptions.params[name],\n      }\n    }\n\n    return {\n      type: 'Parameter',\n      name,\n    }\n  },\n}\n\nconst OBJECT_BUILDER: MarkVisitor<ObjectAttributeNode> = {\n  object_expr(p) {\n    if (p.getMark().name === 'pair') {\n      p.shift()\n      const condition = p.process(EXPR_BUILDER)\n      const value = p.process(EXPR_BUILDER)\n\n      return {\n        type: 'ObjectConditionalSplat',\n        condition,\n        value,\n      }\n    }\n\n    const value = p.process(EXPR_BUILDER)\n\n    return {\n      type: 'ObjectAttributeValue',\n      name: extractPropertyKey(value),\n      value,\n    }\n  },\n\n  object_pair(p) {\n    const name = p.process(EXPR_BUILDER)\n    if (name.type !== 'Value') throw new Error('name must be string')\n\n    const value = p.process(EXPR_BUILDER)\n    return {\n      type: 'ObjectAttributeValue',\n      name: name.value,\n      value: value,\n    }\n  },\n\n  object_splat(p): ObjectSplatNode {\n    const value = p.process(EXPR_BUILDER)\n\n    return {\n      type: 'ObjectSplat',\n      value,\n    }\n  },\n\n  object_splat_this(): ObjectSplatNode {\n    return {\n      type: 'ObjectSplat',\n      value: {type: 'This'},\n    }\n  },\n}\n\nconst TRAVERSE_BUILDER: MarkVisitor<(rhs: TraversalResult | null) => TraversalResult> = {\n  square_bracket(p) {\n    const expr = p.process(EXPR_BUILDER)\n\n    const value = tryConstantEvaluate(expr)\n    if (value && value.type === 'number') {\n      return (right) =>\n        traverseElement((base) => ({type: 'AccessElement', base, index: value.data}), right)\n    }\n\n    if (value && value.type === 'string') {\n      return (right) =>\n        traversePlain((base) => ({type: 'AccessAttribute', base, name: value.data}), right)\n    }\n\n    return (right) =>\n      traverseArray(\n        (base) => ({\n          type: 'Filter',\n          base,\n          expr,\n        }),\n        right,\n      )\n  },\n\n  slice(p) {\n    const isInclusive = p.getMark().name === 'inc_range'\n    p.shift()\n\n    const left = p.process(EXPR_BUILDER)\n    const right = p.process(EXPR_BUILDER)\n\n    const leftValue = tryConstantEvaluate(left)\n    const rightValue = tryConstantEvaluate(right)\n\n    if (!leftValue || !rightValue || leftValue.type !== 'number' || rightValue.type !== 'number') {\n      throw new GroqQueryError('slicing must use constant numbers')\n    }\n\n    return (rhs) =>\n      traverseArray(\n        (base) => ({\n          type: 'Slice',\n          base,\n          left: leftValue.data,\n          right: rightValue.data,\n          isInclusive,\n        }),\n        rhs,\n      )\n  },\n\n  projection(p) {\n    const obj = p.process(EXPR_BUILDER)\n    return (right) =>\n      traverseProjection((base) => ({type: 'Projection', base: base, expr: obj}), right)\n  },\n\n  attr_access(p) {\n    const name = p.processString()\n\n    return (right) => traversePlain((base) => ({type: 'AccessAttribute', base, name}), right)\n  },\n\n  deref(p) {\n    let attr: string | null = null\n\n    if (p.getMark().name === 'deref_attr') {\n      p.shift()\n      attr = p.processString()\n    }\n\n    const wrap = (base: ExprNode): ExprNode =>\n      attr ? {type: 'AccessAttribute', base, name: attr} : base\n\n    return (right) =>\n      traversePlain(\n        (base) =>\n          wrap({\n            type: 'Deref',\n            base,\n          }),\n        right,\n      )\n  },\n\n  array_postfix(p) {\n    return (right) => traverseArray((base) => ({type: 'ArrayCoerce', base}), right)\n  },\n}\n\nconst SELECTOR_BUILDER: MarkVisitor<null> = {\n  group(p) {\n    p.process(SELECTOR_BUILDER)\n    return null\n  },\n\n  everything() {\n    throw new Error('Invalid selector syntax')\n  },\n\n  this() {\n    throw new Error('Invalid selector syntax')\n  },\n\n  parent() {\n    throw new Error('Invalid selector syntax')\n  },\n\n  dblparent(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  traverse(p) {\n    p.process(SELECTOR_BUILDER)\n    while (p.getMark().name !== 'traversal_end') {\n      p.process(TRAVERSE_BUILDER)\n    }\n\n    p.shift()\n    return null\n  },\n\n  this_attr(p) {\n    p.processString()\n    return null\n  },\n\n  neg(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  pos(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  add(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  sub(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  mul(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  div(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  mod(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  pow(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  comp(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  in_range(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  str(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  integer(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  float(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  sci(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  object(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  array(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  tuple(p) {\n    // This should only throw an error until we add support for tuples in selectors.\n    throw new Error('Invalid selector syntax')\n  },\n\n  func_call(p, mark) {\n    const func = EXPR_BUILDER.func_call(p, mark) as FuncCallNode\n    if (func.name === 'anywhere' && func.args.length === 1) return null\n\n    throw new Error('Invalid selector syntax')\n  },\n\n  pipecall(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  pair(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  and(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  or(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  not(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  asc(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  desc(p) {\n    throw new Error('Invalid selector syntax')\n  },\n\n  param(p) {\n    throw new Error('Invalid selector syntax')\n  },\n}\n\nfunction extractPropertyKey(node: ExprNode): string {\n  if (node.type === 'AccessAttribute' && !node.base) {\n    return node.name\n  }\n\n  if (\n    node.type === 'Deref' ||\n    node.type === 'Map' ||\n    node.type === 'Projection' ||\n    node.type === 'Slice' ||\n    node.type === 'Filter' ||\n    node.type === 'AccessElement' ||\n    node.type === 'ArrayCoerce'\n  ) {\n    return extractPropertyKey(node.base)\n  }\n\n  throw new GroqQueryError(`Cannot determine property key for type: ${node.type}`)\n}\n\nfunction validateArity(name: string, arity: GroqFunctionArity, count: number) {\n  if (typeof arity === 'number') {\n    if (count !== arity) {\n      throw new GroqQueryError(\n        `Incorrect number of arguments to function ${name}(). Expected ${arity}, got ${count}.`,\n      )\n    }\n  } else if (arity) {\n    if (!arity(count)) {\n      throw new GroqQueryError(`Incorrect number of arguments to function ${name}().`)\n    }\n  }\n}\n\nfunction argumentShouldBeSelector(namespace: string, functionName: string, argCount: number) {\n  const functionsRequiringSelectors = ['changedAny', 'changedOnly']\n\n  return namespace == 'diff' && argCount == 2 && functionsRequiringSelectors.includes(functionName)\n}\n\nclass GroqSyntaxError extends Error {\n  public position: number\n  public name = 'GroqSyntaxError'\n\n  constructor(position: number) {\n    super(`Syntax error in GROQ query at position ${position}`)\n    this.position = position\n  }\n}\n\n/**\n * Parses a GROQ query and returns a tree structure.\n */\nexport function parse(input: string, options: ParseOptions = {}): ExprNode {\n  const result = rawParse(input)\n  if (result.type === 'error') {\n    throw new GroqSyntaxError(result.position)\n  }\n  const processor = new MarkProcessor(input, result.marks as Mark[], options)\n  return processor.process(EXPR_BUILDER)\n}\n"],"names":["__publicField","count","path","string","dateTime","now","parse","token","rhs","identLen","value","rawParse"],"mappings":"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"}