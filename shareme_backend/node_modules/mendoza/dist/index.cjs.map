{"version":3,"file":"index.cjs","sources":["../src/internal-patcher.ts","../src/utf8.ts","../src/incremental-patcher.ts","../src/simple-patcher.ts"],"sourcesContent":["import {ObjectModel} from './object-model'\nimport {RawPatch} from './patch'\n\nconst OPS = [\n  'Value',\n  'Copy',\n  'Blank',\n  'ReturnIntoArray',\n  'ReturnIntoObject',\n  'ReturnIntoObjectSameKey',\n  'PushField',\n  'PushElement',\n  'PushParent',\n  'Pop',\n  'PushFieldCopy',\n  'PushFieldBlank',\n  'PushElementCopy',\n  'PushElementBlank',\n  'ReturnIntoObjectPop',\n  'ReturnIntoObjectSameKeyPop',\n  'ReturnIntoArrayPop',\n  'ObjectSetFieldValue',\n  'ObjectCopyField',\n  'ObjectDeleteField',\n  'ArrayAppendValue',\n  'ArrayAppendSlice',\n  'StringAppendString',\n  'StringAppendSlice',\n]\n\ntype InputEntry<V> = {\n  value: V\n  key?: string\n  keys?: string[]\n}\n\ntype OutputEntry<V, S, O, A> = {\n  value: V | null\n  writeValue?: S | O | A\n}\n\nexport class Patcher<V, S, O, A> {\n  model: ObjectModel<V, S, O, A>\n  root: V\n  patch: RawPatch\n  i: number\n  inputStack: InputEntry<V>[]\n  outputStack: OutputEntry<V, S, O, A>[]\n\n  constructor(model: ObjectModel<V, S, O, A>, root: V, patch: RawPatch) {\n    this.model = model\n    this.root = root\n    this.patch = patch\n    this.i = 0\n    this.inputStack = []\n    this.outputStack = []\n  }\n\n  read(): unknown {\n    return this.patch[this.i++]\n  }\n\n  process() {\n    this.inputStack.push({value: this.root})\n    this.outputStack.push({value: this.root})\n\n    for (; this.i < this.patch.length; ) {\n      let opcode = this.read() as number\n      let op = OPS[opcode]\n      if (!op) throw new Error(`Unknown opcode: ${opcode}`)\n      let processor = `process${op}`\n      ;(this as any)[processor].apply(this)\n    }\n\n    let entry = this.outputStack.pop()!\n    return this.finalizeOutput(entry)\n  }\n\n  inputEntry(): InputEntry<V> {\n    return this.inputStack[this.inputStack.length - 1]\n  }\n\n  inputKey(entry: InputEntry<V>, idx: number): string {\n    if (!entry.keys) {\n      entry.keys = this.model.objectGetKeys(entry.value).sort()\n    }\n\n    return entry.keys[idx]\n  }\n\n  outputEntry(): OutputEntry<V, S, O, A> {\n    return this.outputStack[this.outputStack.length - 1]\n  }\n\n  outputArray(): A {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyArray(entry.value)\n    }\n\n    return entry.writeValue as A\n  }\n\n  outputObject(): O {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyObject(entry.value)\n    }\n\n    return entry.writeValue as O\n  }\n\n  outputString(): S {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyString(entry.value)\n    }\n\n    return entry.writeValue as S\n  }\n\n  finalizeOutput(entry: OutputEntry<V, S, O, A>): V {\n    if (entry.writeValue) {\n      return this.model.finalize(entry.writeValue)\n    } else {\n      return entry.value!\n    }\n  }\n\n  // Processors:\n\n  processValue() {\n    let value = this.model.wrap(this.read())\n    this.outputStack.push({value})\n  }\n\n  processCopy() {\n    let input = this.inputEntry()\n    this.outputStack.push({value: input.value})\n  }\n\n  processBlank() {\n    this.outputStack.push({value: null})\n  }\n\n  processReturnIntoArray() {\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    let arr = this.outputArray()\n    this.model.arrayAppendValue(arr, result)\n  }\n\n  processReturnIntoObject() {\n    let key = this.read() as string\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    result = this.model.markChanged(result)\n    let obj = this.outputObject()\n    this.model.objectSetField(obj, key, result)\n  }\n\n  processReturnIntoObjectSameKey() {\n    let input = this.inputEntry()\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    let obj = this.outputObject()\n    this.model.objectSetField(obj, input.key!, result)\n  }\n\n  processPushField() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let key = this.inputKey(entry, idx)\n    let value = this.model.objectGetField(entry.value, key)\n    this.inputStack.push({value, key})\n  }\n\n  processPushElement() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let value = this.model.arrayGetElement(entry.value, idx)\n    this.inputStack.push({value})\n  }\n\n  processPop() {\n    this.inputStack.pop()\n  }\n\n  processPushFieldCopy() {\n    this.processPushField()\n    this.processCopy()\n  }\n\n  processPushFieldBlank() {\n    this.processPushField()\n    this.processBlank()\n  }\n\n  processPushElementCopy() {\n    this.processPushElement()\n    this.processCopy()\n  }\n\n  processPushElementBlank() {\n    this.processPushElement()\n    this.processBlank()\n  }\n\n  processReturnIntoObjectPop() {\n    this.processReturnIntoObject()\n    this.processPop()\n  }\n\n  processReturnIntoObjectSameKeyPop() {\n    this.processReturnIntoObjectSameKey()\n    this.processPop()\n  }\n\n  processReturnIntoArrayPop() {\n    this.processReturnIntoArray()\n    this.processPop()\n  }\n\n  processObjectSetFieldValue() {\n    this.processValue()\n    this.processReturnIntoObject()\n  }\n\n  processObjectCopyField() {\n    this.processPushField()\n    this.processCopy()\n    this.processReturnIntoObjectSameKey()\n    this.processPop()\n  }\n\n  processObjectDeleteField() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let key = this.inputKey(entry, idx)\n    let obj = this.outputObject()\n    this.model.objectDeleteField(obj, key)\n  }\n\n  processArrayAppendValue() {\n    let value = this.model.wrap(this.read())\n    let arr = this.outputArray()\n    this.model.arrayAppendValue(arr, value)\n  }\n\n  processArrayAppendSlice() {\n    let left = this.read() as number\n    let right = this.read() as number\n    let str = this.outputArray()\n    let val = this.inputEntry().value\n    this.model.arrayAppendSlice(str, val, left, right)\n  }\n\n  processStringAppendString() {\n    let value = this.model.wrap(this.read())\n    let str = this.outputString()\n    this.model.stringAppendValue(str, value)\n  }\n\n  processStringAppendSlice() {\n    let left = this.read() as number\n    let right = this.read() as number\n    let str = this.outputString()\n    let val = this.inputEntry().value\n    this.model.stringAppendSlice(str, val, left, right)\n  }\n}\n","export function utf8charSize(code: number): 1 | 2 | 3 | 4 {\n  if (code >> 16) {\n    return 4\n  } else if (code >> 11) {\n    return 3\n  } else if (code >> 7) {\n    return 2\n  } else {\n    return 1\n  }\n}\n\nexport function utf8stringSize(str: string): number {\n  let b = 0\n  for (let i = 0; i < str.length; i++) {\n    let code = str.codePointAt(i)!\n    let size = utf8charSize(code)\n    if (size == 4) i++\n    b += size\n  }\n  return b\n}\n\n/** Converts an UTF-8 byte index into a UCS-2 index. */\nexport function utf8resolveIndex(str: string, idx: number, start = 0) {\n  let byteCount = start\n  let ucsIdx = 0\n\n  for (ucsIdx = start; byteCount < idx; ucsIdx++) {\n    let code = str.codePointAt(ucsIdx)!\n    let size = utf8charSize(code)\n    if (size === 4) ucsIdx++ // Surrogate pair.\n    byteCount += size\n  }\n\n  return ucsIdx\n}\n\nexport function commonPrefix(str: string, str2: string) {\n  let len = Math.min(str.length, str2.length)\n  let b = 0\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(i)!\n    let bPoint = str2.codePointAt(i)!\n    if (aPoint !== bPoint) return b\n    let size = utf8charSize(aPoint)\n    b += size\n    i += size === 4 ? 2 : 1\n  }\n  return b\n}\n\nexport function commonSuffix(str: string, str2: string, prefix: number = 0) {\n  let len = Math.min(str.length, str2.length) - prefix\n  let b = 0\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(str.length - 1 - i)!\n    let bPoint = str2.codePointAt(str2.length - 1 - i)!\n    if (aPoint !== bPoint) return b\n    let size = utf8charSize(aPoint)\n    b += size\n    i += size === 4 ? 2 : 1\n  }\n  return b\n}\n","import {Patcher} from './internal-patcher'\nimport type {ObjectModel} from './object-model'\nimport type {RawPatch} from './patch'\nimport {commonPrefix, commonSuffix, utf8charSize, utf8stringSize} from './utf8'\n\n// The incremental patcher allows you to apply multiple patches and tracks the history of every element.\n// It also allows you to extract a simple diff between the documents.\n\nexport type Value<T> = {\n  data?: unknown\n  content?: Content<T>\n  startMeta: T\n  endMeta: T\n}\n\nexport type Type = 'array' | 'string' | 'object' | 'number' | 'boolean' | 'null'\n\nexport type Content<T> = ObjectContent<T> | ArrayContent<T> | StringContent<T>\n\nexport type ObjectContent<T> = {\n  type: 'object'\n  fields: {[key: string]: Value<T>}\n}\n\nexport type ArrayContent<T> = {\n  type: 'array'\n  elements: Value<T>[]\n  metas: T[]\n}\n\nexport type StringContent<T> = {\n  type: 'string'\n  parts: StringPart<T>[]\n}\n\nexport type StringPart<T> = {\n  value: string\n  utf8size: number\n  uses: StringContent<T>[]\n  startMeta: T\n  endMeta: T\n}\n\nclass IncrementalModel<T>\n  implements ObjectModel<Value<T>, StringContent<T>, ObjectContent<T>, ArrayContent<T>>\n{\n  meta: T\n\n  constructor(meta: T) {\n    this.meta = meta\n  }\n\n  wrap(data: unknown): Value<T> {\n    return this.wrapWithMeta(data, this.meta, this.meta)\n  }\n\n  wrapWithMeta(data: unknown, startMeta: T, endMeta: T = this.meta): Value<T> {\n    return {data, startMeta, endMeta}\n  }\n\n  asObject(value: Value<T>): ObjectContent<T> {\n    if (!value.content) {\n      let fields: ObjectContent<T>['fields'] = {}\n      for (let [key, val] of Object.entries(value.data as any)) {\n        fields[key] = this.wrapWithMeta(val, value.startMeta)\n      }\n      value.content = {type: 'object', fields}\n    }\n\n    return value.content as ObjectContent<T>\n  }\n\n  asArray(value: Value<T>): ArrayContent<T> {\n    if (!value.content) {\n      let elements = (value.data as unknown[]).map((item) =>\n        this.wrapWithMeta(item, value.startMeta),\n      )\n      let metas = elements.map(() => this.meta)\n      value.content = {type: 'array', elements, metas}\n    }\n\n    return value.content as ArrayContent<T>\n  }\n\n  asString(value: Value<T>): StringContent<T> {\n    if (!value.content) {\n      let str = value.data as string\n\n      let part: StringPart<T> = {\n        value: str,\n        utf8size: utf8stringSize(str),\n        uses: [],\n        startMeta: value.startMeta,\n        endMeta: value.endMeta,\n      }\n      value.content = this.stringFromParts([part])\n    }\n\n    return value.content as StringContent<T>\n  }\n\n  stringFromParts(parts: StringPart<T>[]): StringContent<T> {\n    let str: StringContent<T> = {\n      type: 'string',\n      parts,\n    }\n\n    for (let part of parts) {\n      part.uses.push(str)\n    }\n\n    return str\n  }\n\n  objectGetKeys(value: Value<T>): string[] {\n    if (value.content) {\n      return Object.keys((value.content as ObjectContent<T>).fields)\n    } else {\n      return Object.keys(value.data as any)\n    }\n  }\n\n  objectGetField(value: Value<T>, key: string): Value<T> {\n    let obj = this.asObject(value)\n    return obj.fields[key]\n  }\n\n  arrayGetElement(value: Value<T>, idx: number): Value<T> {\n    let arr = this.asArray(value)\n    return arr.elements[idx]\n  }\n\n  finalize(content: Content<T>): Value<T> {\n    this.updateEndMeta(content)\n    return {content, startMeta: this.meta, endMeta: this.meta}\n  }\n\n  markChanged(value: Value<T>): Value<T> {\n    return this.wrap(unwrap(value))\n  }\n\n  updateEndMeta(content: Content<T>) {\n    if (content.type == 'string') {\n      for (let part of content.parts) {\n        part.endMeta = this.meta\n      }\n    } else {\n      if (content.type === 'array') {\n        for (let val of content.elements) {\n          if (val.content && val.endMeta !== this.meta) {\n            this.updateEndMeta(val.content)\n          }\n          val.endMeta = this.meta\n        }\n      } else {\n        for (let val of Object.values(content.fields)) {\n          if (val.content && val.endMeta !== this.meta) {\n            this.updateEndMeta(val.content)\n          }\n          val.endMeta = this.meta\n        }\n      }\n    }\n  }\n\n  copyString(value: Value<T> | null): StringContent<T> {\n    if (value) {\n      let other = this.asString(value)\n      return this.stringFromParts(other.parts.slice())\n    } else {\n      return {\n        type: 'string',\n        parts: [],\n      }\n    }\n  }\n\n  copyObject(value: Value<T> | null): ObjectContent<T> {\n    let obj: ObjectContent<T> = {\n      type: 'object',\n      fields: {},\n    }\n\n    if (value) {\n      let other = this.asObject(value)\n      Object.assign(obj.fields, other.fields)\n    }\n\n    return obj\n  }\n\n  copyArray(value: Value<T> | null): ArrayContent<T> {\n    let arr = value ? this.asArray(value) : null\n    let elements = arr ? arr.elements : []\n    let metas = arr ? arr.metas : []\n\n    return {\n      type: 'array',\n      elements,\n      metas,\n    }\n  }\n\n  objectSetField(target: ObjectContent<T>, key: string, value: Value<T>): void {\n    target.fields[key] = value\n  }\n\n  objectDeleteField(target: ObjectContent<T>, key: string): void {\n    delete target.fields[key]\n  }\n\n  arrayAppendValue(target: ArrayContent<T>, value: Value<T>): void {\n    target.elements.push(value)\n    target.metas.push(this.meta)\n  }\n\n  arrayAppendSlice(target: ArrayContent<T>, source: Value<T>, left: number, right: number): void {\n    let arr = this.asArray(source)\n    let samePosition = arr.elements.length === left\n\n    target.elements.push(...arr.elements.slice(left, right))\n\n    if (samePosition) {\n      target.metas.push(...arr.metas.slice(left, right))\n    } else {\n      for (let i = left; i < right; i++) {\n        target.metas.push(this.meta)\n      }\n    }\n  }\n\n  stringAppendValue(target: StringContent<T>, value: Value<T>): void {\n    let str = this.asString(value)\n    for (let part of str.parts) {\n      this.stringAppendPart(target, part)\n    }\n  }\n\n  stringAppendPart(target: StringContent<T>, part: StringPart<T>): void {\n    target.parts.push(part)\n    part.uses.push(target)\n  }\n\n  resolveStringPart(str: StringContent<T>, from: number, len: number): number {\n    if (len === 0) return from\n\n    for (let i = from; i < str.parts.length; i++) {\n      let part = str.parts[i]\n\n      if (len === part.utf8size) {\n        // Matches perfect!\n        return i + 1\n      }\n\n      if (len < part.utf8size) {\n        // It's a part of this chunk. We now need to split it up.\n        this.splitString(part, len)\n        return i + 1\n      }\n\n      len -= part.utf8size\n    }\n\n    throw new Error('splitting string out of bounds')\n  }\n\n  splitString(part: StringPart<T>, idx: number) {\n    let leftValue\n    let rightValue\n    let leftSize = idx\n    let rightSize = part.utf8size - leftSize\n\n    // idx is here in UTF-8 index, not codepoint index.\n    // This means we might to adjust for multi-byte characters.\n    if (part.utf8size !== part.value.length) {\n      let byteCount = 0\n\n      for (idx = 0; byteCount < leftSize; idx++) {\n        let code = part.value.codePointAt(idx)!\n        let size = utf8charSize(code)\n        if (size === 4) idx++ // Surrogate pair.\n        byteCount += size\n      }\n    }\n\n    leftValue = part.value.slice(0, idx)\n    rightValue = part.value.slice(idx)\n\n    let newPart: StringPart<T> = {\n      value: rightValue,\n      utf8size: rightSize,\n      uses: part.uses.slice(),\n      startMeta: part.startMeta,\n      endMeta: part.endMeta,\n    }\n\n    part.value = leftValue\n    part.utf8size = leftSize\n\n    for (let use of part.uses) {\n      // Insert the new part.\n      let ndx = use.parts.indexOf(part)\n      if (ndx === -1) throw new Error('bug: mismatch between string parts and use.')\n      use.parts.splice(ndx + 1, 0, newPart)\n    }\n  }\n\n  stringAppendSlice(target: StringContent<T>, source: Value<T>, left: number, right: number): void {\n    let str = this.asString(source)\n    let firstPart = this.resolveStringPart(str, 0, left)\n    let lastPart = this.resolveStringPart(str, firstPart, right - left)\n\n    for (let i = firstPart; i < lastPart; i++) {\n      let part = str.parts[i]\n      this.stringAppendPart(target, part)\n    }\n  }\n}\n\n// Turns a native JavaScript object into a Value with a given origin.\nexport function wrap<T>(data: unknown, meta: T): Value<T> {\n  return {data, startMeta: meta, endMeta: meta}\n}\n\n// Converts a Value into a native JavaScript type.\nexport function unwrap<T>(value: Value<T>): unknown {\n  if (typeof value.data !== 'undefined') return value.data\n\n  let result: any\n  let content = value.content!\n  switch (content.type) {\n    case 'string':\n      result = content.parts.map((part) => part.value).join('')\n      break\n    case 'array':\n      result = content.elements.map((val) => unwrap(val))\n      break\n    case 'object': {\n      result = {}\n      for (let [key, val] of Object.entries(content.fields)) {\n        result[key] = unwrap(val)\n      }\n    }\n  }\n\n  value.data = result\n  return result\n}\n\n// Returns the type of a Value.\nexport function getType<T>(value: Value<T>): Type {\n  if (value.content) return value.content.type\n  if (Array.isArray(value.data!)) return 'array'\n  if (value.data === null) return 'null'\n\n  return typeof value.data as Type\n}\n\n// Updates the `right` value such that it reuses as much as possible from the `left` value.\nexport function rebaseValue<T>(left: Value<T>, right: Value<T>): Value<T> {\n  let leftType = getType(left)\n  let rightType = getType(right)\n  if (leftType !== rightType) return right\n\n  let leftModel = new IncrementalModel(left.endMeta)\n  let rightModel = new IncrementalModel(right.endMeta)\n\n  switch (leftType) {\n    case 'object': {\n      let leftObj = leftModel.asObject(left)\n      let rightObj = rightModel.asObject(right)\n\n      // Number of fields which are identical in left and right.\n      let identicalFieldCount = 0\n      let leftFieldCount = Object.keys(leftObj.fields).length\n      let rightFieldCount = Object.keys(rightObj.fields).length\n\n      for (let [key, rightVal] of Object.entries(rightObj.fields)) {\n        let leftVal = leftObj.fields[key]\n        if (leftVal) {\n          rightObj.fields[key] = rebaseValue(leftVal, rightVal)\n          if (rightObj.fields[key] === leftVal) {\n            identicalFieldCount++\n          }\n        }\n      }\n\n      let isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount\n      return isIdentical ? left : right\n    }\n    case 'array': {\n      let leftArr = leftModel.asArray(left)\n      let rightArr = rightModel.asArray(right)\n\n      if (leftArr.elements.length !== rightArr.elements.length) {\n        break\n      }\n\n      let numRebased = 0\n      for (let i = 0; i < rightArr.elements.length; i++) {\n        rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i])\n        if (rightArr.elements[i] !== leftArr.elements[i]) {\n          numRebased++\n        }\n      }\n\n      return numRebased === 0 ? left : right\n    }\n    case 'null':\n    case 'boolean':\n    case 'number': {\n      if (unwrap(left) === unwrap(right)) return left\n      break\n    }\n    case 'string': {\n      let leftRaw = unwrap(left) as string\n      let rightRaw = unwrap(right) as string\n      if (leftRaw === rightRaw) return left\n\n      let result = rightModel.copyString(null)\n      let prefix = commonPrefix(leftRaw, rightRaw)\n      let suffix = commonSuffix(leftRaw, rightRaw, prefix)\n\n      let rightLen = utf8stringSize(rightRaw)\n      let leftLen = utf8stringSize(leftRaw)\n\n      if (0 < prefix) {\n        rightModel.stringAppendSlice(result, left, 0, prefix)\n      }\n      if (prefix < rightLen - suffix) {\n        rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix)\n      }\n      if (leftLen - suffix < leftLen) {\n        rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen)\n      }\n      let value = rightModel.finalize(result)\n      if (unwrap(value) !== rightRaw) throw new Error('incorrect string rebase')\n      return value\n    }\n  }\n\n  return right\n}\n\nexport function applyPatch<T>(left: Value<T>, patch: RawPatch, startMeta: T) {\n  let model = new IncrementalModel(startMeta)\n  let patcher = new Patcher(model, left, patch)\n  return patcher.process()\n}\n","import {Patcher} from './internal-patcher'\nimport {ObjectModel} from './object-model'\nimport {RawPatch} from './patch'\nimport {utf8resolveIndex} from './utf8'\n\ntype StringBuilder = {type: 'string'; data: string}\ntype ObjectBuilder = {type: 'object'; data: {[key: string]: unknown}}\ntype ArrayBuilder = unknown[]\n\nclass SimpleModel implements ObjectModel<unknown, StringBuilder, ObjectBuilder, ArrayBuilder> {\n  wrap(data: any): unknown {\n    return data\n  }\n\n  finalize(b: StringBuilder | ObjectBuilder | ArrayBuilder): unknown {\n    if (Array.isArray(b)) {\n      return b\n    } else {\n      return b.data\n    }\n  }\n\n  markChanged(value: unknown) {\n    return value\n  }\n\n  objectGetKeys(value: unknown): string[] {\n    return Object.keys(value as any)\n  }\n\n  objectGetField(value: unknown, key: string): unknown {\n    return (value as any)[key]\n  }\n\n  arrayGetElement(value: unknown, idx: number): unknown {\n    return (value as any[])[idx]\n  }\n\n  copyObject(value: unknown | null): ObjectBuilder {\n    let res: ObjectBuilder = {\n      type: 'object',\n      data: {},\n    }\n    if (value !== null) {\n      for (let [key, val] of Object.entries(value as ObjectBuilder)) {\n        res.data[key] = val\n      }\n    }\n    return res\n  }\n\n  copyArray(value: unknown | null): ArrayBuilder {\n    if (value === null) return []\n    return (value as ArrayBuilder).slice()\n  }\n\n  copyString(value: unknown | null): StringBuilder {\n    return {\n      type: 'string',\n      data: value === null ? '' : (value as string),\n    }\n  }\n\n  objectSetField(target: ObjectBuilder, key: string, value: unknown): void {\n    target.data[key] = value\n  }\n\n  objectDeleteField(target: ObjectBuilder, key: string): void {\n    delete target.data[key]\n  }\n\n  arrayAppendValue(target: ArrayBuilder, value: unknown): void {\n    target.push(value)\n  }\n\n  arrayAppendSlice(target: ArrayBuilder, source: unknown, left: number, right: number): void {\n    target.push(...(source as ArrayBuilder).slice(left, right))\n  }\n\n  stringAppendSlice(target: StringBuilder, source: unknown, left: number, right: number): void {\n    const sourceString = source as string\n\n    const leftPos = utf8resolveIndex(sourceString, left)\n    const rightPos = utf8resolveIndex(sourceString, right, leftPos)\n\n    target.data += sourceString.slice(leftPos, rightPos)\n  }\n\n  stringAppendValue(target: StringBuilder, value: unknown): void {\n    target.data += value as string\n  }\n}\n\n// Applies a patch on a JavaScript object.\nexport function applyPatch(left: any, patch: RawPatch): any {\n  let root = left // No need to wrap because the representation is the same.\n  let patcher = new Patcher(new SimpleModel(), root, patch)\n  return patcher.process()\n}\n"],"names":["applyPatch"],"mappings":"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"}